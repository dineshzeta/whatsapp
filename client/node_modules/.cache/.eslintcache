[{"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\App.js":"2","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\Error404.js":"4","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\routing\\AdminRoute.js":"5","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\routing\\PublicRoute.js":"6","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\routing\\UserRoute.js":"7","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\AdminDashboard.js":"8","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\LoginAdmin.js":"9","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\LoginUser.js":"10","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\UserDashboard.js":"11","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\DonePage.js":"12","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\context\\GlobalContext.js":"13","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetWebSet.js":"14","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\recovery\\RecoverUser.js":"15","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\recovery\\RecoverAdmin.js":"16","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\installation\\InstallApp.js":"17","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\DocScreen.js":"18","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetUserByToken.js":"19","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\DashboardPage.js":"20","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\context\\AdminContext.js":"21","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\UserDashPage.js":"22","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\doc\\MongoComp.js":"23","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\doc\\ReqComp.js":"24","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\doc\\DeployComp.js":"25","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\doc\\AppIntro.js":"26","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\DashScreen.js":"27","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\app-config.js\\AppConfig.js":"28","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\manage-plans\\ManagePlans.js":"29","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\manage-users\\ManageUsers.js":"30","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\ping-user\\PingFromUser.js":"31","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\smtp-config\\SMTPConfig.js":"32","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\trans-log\\TransLog.js":"33","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\payment-gateways\\ManagePayGateway.js":"34","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\profile\\ProfileSet.js":"35","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\UserDash.js":"36","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bot\\WhatsAppBot.js":"37","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\opt-plan\\OptPlan.js":"38","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\BulkMsg.js":"39","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\msg-history\\MsgHistory.js":"40","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\instances\\Instance.js":"41","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\profile\\UpdateProfile.js":"42","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\check-logs\\CheckLogs.js":"43","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\ping\\PingToAdmin.js":"44","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\send-messages\\SendMessage.js":"45","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetAllUserAdmin.js":"46","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetPlans.js":"47","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\manage-plans\\AddPlan.js":"48","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetTokenAdmin.js":"49","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\manage-users\\components\\EditUser.js":"50","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\common\\DialogHeader.js":"51","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\context\\BotContext.js":"52","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\context\\SendBulkContext.js":"53","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\opt-plan\\DialogPlan.js":"54","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bot\\components\\AddReply.js":"55","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bot\\components\\InitialScreen.js":"56","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\StepComp.js":"57","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\send-messages\\components\\SendMedia.js":"58","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\send-messages\\components\\SendSingle.js":"59","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bot\\components\\RunningBot.js":"60","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\VisibleComp.js":"61","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\send-messages\\components\\AddMediaComp.js":"62","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetInstance.js":"63","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\SendMessage.js":"64","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\ChooseType.js":"65","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\ComposeMsg.js":"66","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\CollectNum.js":"67","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\excel\\WriteExlMsg.js":"68","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\excel\\SendExcelMsg.js":"69","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\paste\\PasteNum.js":"70","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\excel\\ExcelNum.js":"71","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\paste\\SendPasteMsg.js":"72","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\paste\\WritePasteMsg.js":"73","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\AddMediaComp.js":"74","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\DelayMsg.js":"75"},{"size":597,"mtime":1681132213931,"results":"76","hashOfConfig":"77"},{"size":2691,"mtime":1681132213915,"results":"78","hashOfConfig":"77"},{"size":375,"mtime":1681132213931,"results":"79","hashOfConfig":"77"},{"size":854,"mtime":1681132213915,"results":"80","hashOfConfig":"77"},{"size":1264,"mtime":1681132213947,"results":"81","hashOfConfig":"77"},{"size":578,"mtime":1681132213947,"results":"82","hashOfConfig":"77"},{"size":574,"mtime":1681132213947,"results":"83","hashOfConfig":"77"},{"size":8913,"mtime":1681132213915,"results":"84","hashOfConfig":"77"},{"size":4652,"mtime":1681132213915,"results":"85","hashOfConfig":"77"},{"size":9207,"mtime":1681132213947,"results":"86","hashOfConfig":"77"},{"size":9067,"mtime":1681132213947,"results":"87","hashOfConfig":"77"},{"size":1085,"mtime":1681132213947,"results":"88","hashOfConfig":"77"},{"size":336,"mtime":1681132213931,"results":"89","hashOfConfig":"77"},{"size":410,"mtime":1681132213963,"results":"90","hashOfConfig":"77"},{"size":3715,"mtime":1681132213931,"results":"91","hashOfConfig":"77"},{"size":3724,"mtime":1681132213931,"results":"92","hashOfConfig":"77"},{"size":5170,"mtime":1681132213931,"results":"93","hashOfConfig":"77"},{"size":10050,"mtime":1681132213931,"results":"94","hashOfConfig":"77"},{"size":1035,"mtime":1681132213963,"results":"95","hashOfConfig":"77"},{"size":1154,"mtime":1681132213915,"results":"96","hashOfConfig":"77"},{"size":332,"mtime":1681132213931,"results":"97","hashOfConfig":"77"},{"size":1165,"mtime":1681132213947,"results":"98","hashOfConfig":"77"},{"size":2701,"mtime":1681132213931,"results":"99","hashOfConfig":"77"},{"size":3472,"mtime":1681132213931,"results":"100","hashOfConfig":"77"},{"size":4774,"mtime":1681132213931,"results":"101","hashOfConfig":"77"},{"size":1692,"mtime":1681132213931,"results":"102","hashOfConfig":"77"},{"size":4559,"mtime":1681132213930,"results":"103","hashOfConfig":"77"},{"size":5012,"mtime":1681132213931,"results":"104","hashOfConfig":"77"},{"size":3705,"mtime":1681132213931,"results":"105","hashOfConfig":"77"},{"size":4946,"mtime":1681132213931,"results":"106","hashOfConfig":"77"},{"size":6306,"mtime":1681132213931,"results":"107","hashOfConfig":"77"},{"size":3800,"mtime":1681132213931,"results":"108","hashOfConfig":"77"},{"size":5791,"mtime":1681132213931,"results":"109","hashOfConfig":"77"},{"size":5805,"mtime":1681132213931,"results":"110","hashOfConfig":"77"},{"size":2649,"mtime":1681132213931,"results":"111","hashOfConfig":"77"},{"size":4804,"mtime":1681132213947,"results":"112","hashOfConfig":"77"},{"size":764,"mtime":1681132213947,"results":"113","hashOfConfig":"77"},{"size":5886,"mtime":1681132213963,"results":"114","hashOfConfig":"77"},{"size":688,"mtime":1681132213947,"results":"115","hashOfConfig":"77"},{"size":3513,"mtime":1681132213963,"results":"116","hashOfConfig":"77"},{"size":5826,"mtime":1681132213963,"results":"117","hashOfConfig":"77"},{"size":2343,"mtime":1681132213963,"results":"118","hashOfConfig":"77"},{"size":3726,"mtime":1681132213963,"results":"119","hashOfConfig":"77"},{"size":4800,"mtime":1681132213963,"results":"120","hashOfConfig":"77"},{"size":454,"mtime":1681132213963,"results":"121","hashOfConfig":"77"},{"size":708,"mtime":1681132213963,"results":"122","hashOfConfig":"77"},{"size":696,"mtime":1681132213963,"results":"123","hashOfConfig":"77"},{"size":2540,"mtime":1681132213931,"results":"124","hashOfConfig":"77"},{"size":319,"mtime":1681132213963,"results":"125","hashOfConfig":"77"},{"size":9963,"mtime":1681132213931,"results":"126","hashOfConfig":"77"},{"size":441,"mtime":1681132213931,"results":"127","hashOfConfig":"77"},{"size":395,"mtime":1681132213931,"results":"128","hashOfConfig":"77"},{"size":804,"mtime":1681132213931,"results":"129","hashOfConfig":"77"},{"size":9464,"mtime":1681132213963,"results":"130","hashOfConfig":"77"},{"size":7957,"mtime":1681132213947,"results":"131","hashOfConfig":"77"},{"size":1937,"mtime":1681132213947,"results":"132","hashOfConfig":"77"},{"size":4155,"mtime":1681132213947,"results":"133","hashOfConfig":"77"},{"size":5058,"mtime":1681132213963,"results":"134","hashOfConfig":"77"},{"size":4004,"mtime":1681132213963,"results":"135","hashOfConfig":"77"},{"size":2320,"mtime":1681132213947,"results":"136","hashOfConfig":"77"},{"size":1530,"mtime":1681132213947,"results":"137","hashOfConfig":"77"},{"size":5479,"mtime":1681132213963,"results":"138","hashOfConfig":"77"},{"size":646,"mtime":1681132213963,"results":"139","hashOfConfig":"77"},{"size":598,"mtime":1681132213947,"results":"140","hashOfConfig":"77"},{"size":674,"mtime":1681132213947,"results":"141","hashOfConfig":"77"},{"size":1807,"mtime":1681132213947,"results":"142","hashOfConfig":"77"},{"size":566,"mtime":1681132213947,"results":"143","hashOfConfig":"77"},{"size":1926,"mtime":1681132213947,"results":"144","hashOfConfig":"77"},{"size":5783,"mtime":1681132213947,"results":"145","hashOfConfig":"77"},{"size":1496,"mtime":1681132213961,"results":"146","hashOfConfig":"77"},{"size":3925,"mtime":1681132213947,"results":"147","hashOfConfig":"77"},{"size":5652,"mtime":1681132213961,"results":"148","hashOfConfig":"77"},{"size":757,"mtime":1681132213961,"results":"149","hashOfConfig":"77"},{"size":5418,"mtime":1681132213947,"results":"150","hashOfConfig":"77"},{"size":3542,"mtime":1681132213947,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pdritr",{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284"},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299"},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310"},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314"},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321"},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331"},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335"},{"filePath":"336","messages":"337","suppressedMessages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346"},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350"},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354"},{"filePath":"355","messages":"356","suppressedMessages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358"},{"filePath":"359","messages":"360","suppressedMessages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365"},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369"},{"filePath":"370","messages":"371","suppressedMessages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376"},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380"},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399"},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403"},{"filePath":"404","messages":"405","suppressedMessages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410"},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414"},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418"},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422"},"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\index.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\App.js",["423","424"],[],"import React from 'react'\r\nimport { Switch } from 'react-router-dom'\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport PublicRoute from './routing/PublicRoute'\r\nimport AdminRoute from './routing/AdminRoute'\r\nimport LoginAdmin from './admin/LoginAdmin'\r\nimport AdminDashboard from './admin/AdminDashboard'\r\nimport LoginUser from './user/LoginUser';\r\nimport UserRoute from './routing/UserRoute'\r\nimport UserDashboard from './user/UserDashboard';\r\nimport { GlobalProvider } from './context/GlobalContext';\r\nimport DonePage from './user/pages/DonePage';\r\nimport GetWebSet from './utils/GetWebSet';\r\nimport RecoveryUser from './recovery/RecoverUser';\r\nimport RecoveryAdmin from './recovery/RecoverAdmin';\r\nimport InstallApp from './installation/InstallApp';\r\nimport DocScreen from './documentation/DocScreen';\r\nimport Error404 from './Error404';\r\n\r\nconst ColorModeContext = React.createContext({ toggleColorMode: () => { } });\r\n\r\n\r\nexport default function ToggleColorMode() {\r\n  const [splash, setSplash] = React.useState(true)\r\n\r\n  React.useEffect(() => {\r\n    setMode(localStorage.getItem('theme') ? (localStorage.getItem('theme')) : (localStorage.setItem('theme', 'dark'), \"dark\"))\r\n    setTimeout(() => {\r\n      setSplash(false)\r\n    }, 1000);\r\n  }, [])\r\n\r\n  const [mode, setMode] = React.useState('dark');\r\n  const colorMode = React.useMemo(\r\n    () => ({\r\n      toggleColorMode: () => {\r\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n      },\r\n    }),\r\n    [],\r\n  );\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode\r\n        },\r\n      }),\r\n    [mode],\r\n  );\r\n\r\n  return (\r\n    <ColorModeContext.Provider value={colorMode}>\r\n      <GlobalProvider>\r\n        <ThemeProvider theme={theme}>\r\n          <Switch>\r\n            <AdminRoute exact path=\"/admin\" component={AdminDashboard} />\r\n            <PublicRoute exact path=\"/admin/login\" component={LoginAdmin} />\r\n            <PublicRoute exact path=\"/user/login\" component={LoginUser} />\r\n            <UserRoute exact path=\"/user\" component={UserDashboard} />\r\n            <UserRoute exact path=\"/done-page\" component={DonePage} />\r\n            <PublicRoute exact path=\"/recovery-user/:id\" component={RecoveryUser} />\r\n            <PublicRoute exact path=\"/recovery-admin/:id\" component={RecoveryAdmin} />\r\n            <PublicRoute exact path=\"/install\" component={InstallApp} />\r\n            <PublicRoute exact path=\"/doc\" component={DocScreen} />\r\n            <PublicRoute path='*' exact={true} component={Error404} />\r\n          </Switch>\r\n        </ThemeProvider>\r\n      </GlobalProvider>\r\n    </ColorModeContext.Provider>\r\n  );\r\n}","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\Error404.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\routing\\AdminRoute.js",["425"],[],"import axios from 'axios';\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { LinearProgress } from '@mui/material'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    const [state, setState] = React.useState({\r\n        loading: true\r\n    })\r\n\r\n    function checkAdmin() {\r\n        const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/user/get_admin_by_token`, {\r\n            headers: {\r\n                Authorization: \"Beare \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                setState({ ...state, loading: false, isLogin: false })\r\n            } else {\r\n                setState({ ...state, loading: false, isLogin: true })\r\n            }\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        checkAdmin()\r\n    }, [])\r\n\r\n    return (\r\n        state.loading ? (\r\n            <LinearProgress />\r\n        ) : (\r\n            <Route {...rest} render={props => (\r\n                state.isLogin ?\r\n                    <Component {...props} />\r\n                    : <Redirect to=\"/admin/login\" />\r\n            )} />\r\n        )\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\routing\\PublicRoute.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\routing\\UserRoute.js",["426","427"],[],"import React from 'react';\r\nimport { Route, Redirect, useHistory } from 'react-router-dom';\r\nimport GetUserByToken from '../utils/GetUserByToken';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    const isLogin = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const { user_by_token } = GetUserByToken()\r\n\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            isLogin ?\r\n                <Component {...props} />\r\n                : <Redirect to=\"/user/login\" />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\AdminDashboard.js",["428","429","430","431"],[],"import * as React from 'react';\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport Box from '@mui/material/Box';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport List from '@mui/material/List';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Link from '@mui/material/Link';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport { ListItemButton, ListItemIcon, ListItemText } from '@mui/material'\r\nimport { Dashboard as DashboardIcon, Logout, Group, ForwardToInbox, SendAndArchive, AppSettingsAlt, ReceiptLong, Settings, SettingsBackupRestore, PointOfSale, CreditCard, Face } from '@mui/icons-material'\r\nimport DashboardPage from './DashboardPage';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AdminProvider } from '../context/AdminContext';\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://codeyon.com/\">\r\n                Codeyon\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n    shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    ...(open && {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n    ({ theme, open }) => ({\r\n        '& .MuiDrawer-paper': {\r\n            position: 'relative',\r\n            whiteSpace: 'nowrap',\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            boxSizing: 'border-box',\r\n            ...(!open && {\r\n                overflowX: 'hidden',\r\n                transition: theme.transitions.create('width', {\r\n                    easing: theme.transitions.easing.sharp,\r\n                    duration: theme.transitions.duration.leavingScreen,\r\n                }),\r\n                width: theme.spacing(7),\r\n                [theme.breakpoints.up('sm')]: {\r\n                    width: theme.spacing(9),\r\n                },\r\n            }),\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nfunction AdminDashboard() {\r\n    const [open, setOpen] = React.useState(true);\r\n    const history = useHistory()\r\n\r\n    let search = window.location.search;\r\n    let params = new URLSearchParams(search);\r\n    let foo = params.get('page');\r\n\r\n    React.useEffect(() => {\r\n        setPage(parseInt(foo) || 0)\r\n    }, [foo])\r\n\r\n    const [page, setPage] = React.useState(null)\r\n    const toggleDrawer = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n    const menudata = [\r\n        {\r\n            name: \"Dashboard\",\r\n            icon: <DashboardIcon />,\r\n        },\r\n        {\r\n            name: \"Manage Users\",\r\n            icon: <Group />,\r\n        },\r\n        {\r\n            name: \"Manage Plans\",\r\n            icon: <PointOfSale />,\r\n        },\r\n        {\r\n            name: \"Payment Gateways\",\r\n            icon: <CreditCard />,\r\n        },\r\n        {\r\n            name: \"SMTP Config\",\r\n            icon: <ForwardToInbox />,\r\n        },\r\n        {\r\n            name: \"Ping From Users\",\r\n            icon: <SendAndArchive />,\r\n        },\r\n        {\r\n            name: \"App Config\",\r\n            icon: <AppSettingsAlt />,\r\n        },\r\n        {\r\n            name: \"Transaction Log\",\r\n            icon: <ReceiptLong />,\r\n        },\r\n        {\r\n            name: \"Profile\",\r\n            icon: <Face />,\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <AdminProvider>\r\n            <Box sx={{ display: 'flex' }}>\r\n                <CssBaseline />\r\n                <AppBar position=\"absolute\" open={open}>\r\n                    <Toolbar\r\n                        sx={{\r\n                            pr: '24px', // keep right padding when drawer closed\r\n                        }}\r\n                    >\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={toggleDrawer}\r\n                            sx={{\r\n                                marginRight: '36px',\r\n                                ...(open && { display: 'none' }),\r\n                            }}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography\r\n                            component=\"h1\"\r\n                            variant=\"h6\"\r\n                            color=\"inherit\"\r\n                            noWrap\r\n                            sx={{ flexGrow: 1 }}\r\n                        >\r\n                            Hello, Admin!\r\n                        </Typography>\r\n                        <IconButton onClick={() => {\r\n                            if (window.confirm(\"Are your sure?\")) {\r\n                                localStorage.removeItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n                                history.push('/admin/login')\r\n                            }\r\n                        }} color=\"inherit\">\r\n                            <Logout />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer variant=\"permanent\" open={open}>\r\n                    <Toolbar\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'flex-end',\r\n                            px: [1],\r\n                        }}\r\n                    >\r\n                        <IconButton onClick={toggleDrawer}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                    <Divider />\r\n                    <List component=\"nav\">\r\n                        {\r\n                            menudata.map((item, key) => {\r\n                                return (\r\n                                    <ListItemButton style={{ backgroundColor: page === key ? \"#212121\" : null }} onClick={() => {\r\n                                        history.push(`/admin?page=${key}`)\r\n                                        setPage(key)\r\n                                    }} key={key} >\r\n                                        <ListItemIcon>\r\n                                            {item.icon}\r\n                                        </ListItemIcon>\r\n                                        <ListItemText secondary={item.name} />\r\n                                    </ListItemButton>\r\n                                )\r\n                            })\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n                <Box\r\n                    component=\"main\"\r\n                    sx={{\r\n                        flexGrow: 1,\r\n                        height: '100vh',\r\n                        overflow: 'auto',\r\n                    }}\r\n                >\r\n\r\n                    <Toolbar />\r\n                    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n                        <Grid container spacing={3}>\r\n                            {/* Recent Orders */}\r\n                            <Grid item xs={12}>\r\n                                <Paper sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                                    <DashboardPage page={parseInt(page)} />\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Copyright sx={{ pt: 4 }} />\r\n                    </Container>\r\n                </Box>\r\n            </Box>\r\n        </AdminProvider>\r\n    );\r\n}\r\n\r\nexport default function Dashboard() {\r\n    return <AdminDashboard />;\r\n}","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\LoginAdmin.js",["432"],[],"import { Dialog, Grid, IconButton, TextField, Typography, Stack } from '@mui/material'\r\nimport { Box, Container } from '@mui/system'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport React from 'react'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Close } from '@mui/icons-material'\r\n\r\nconst LoginAdmin = () => {\r\n    const [state, setState] = React.useState({})\r\n    const history = useHistory()\r\n\r\n    function tryLogin() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/admin/login`, {\r\n            email: state.email,\r\n            password: state.password\r\n        }).then((res) => {\r\n            setState({ ...state, loading: false })\r\n            if (res.data.success) {\r\n                localStorage.setItem(process.env.REACT_APP_TOKEN + \"_admin\", res.data.token)\r\n                history.push('/admin')\r\n                return\r\n            }\r\n            alert(res.data.msg)\r\n            console.log(res.data)\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            setState({ ...state, loading: false })\r\n        })\r\n    }\r\n\r\n\r\n    function tryRecovery() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/send_recovery_link_admin`, {\r\n            email: state.recovery_email\r\n        }).then((res) => {\r\n            alert(res.data.msg)\r\n            setState({ ...state, loading: false, dialog: false })\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container direction={'column'} height={'100vh'} alignItems='center' justifyContent={'center'} bgcolor='black'>\r\n            <Grid item>\r\n\r\n                <Dialog open={state.dialog} onClose={() => {\r\n                    setState({ ...state, dialog: false })\r\n                }} fullScreen >\r\n                    <Box minHeight={'100vh'} bgcolor={'black'} p={2}>\r\n                        <IconButton onClick={() => setState({ ...state, dialog: false })} >\r\n                            <Close />\r\n                        </IconButton>\r\n                        <Grid container minHeight={'80vh'} alignItems='center' justifyContent={'center'}>\r\n                            <Grid minWidth={400} item>\r\n                                <Stack alignItems={'flex-start'} direction={'column'} spacing={2} >\r\n                                    <TextField onChange={(e) => setState({ ...state, recovery_email: e.target.value })} size='small' label=\"Enter your email\" fullWidth />\r\n                                    <LoadingButton onClick={tryRecovery} disabled={state.recovery_email ? false : true} loading={state.loading} >Send a recover link</LoadingButton>\r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                <Container maxWidth='lg'>\r\n                    <Box p={4} borderRadius={4} bgcolor='#212121'>\r\n                        <Grid container direction=\"column\" spacing={2}>\r\n                            <Grid item>\r\n                                <Typography sx={{ padding: 5 }} color='white' align='center' variant='h2' >Admin Panel</Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField onChange={(e) => setState({ ...state, email: e.target.value })} label=\"Email\" fullWidth />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField onChange={(e) => setState({ ...state, password: e.target.value })} label=\"Password\" type='password' fullWidth />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <a onClick={() => {\r\n                                    setState({ ...state, dialog: true })\r\n                                }} style={{ cursor: 'pointer' }} >\r\n                                    <Typography variant='caption' color='gray' >Forget password?</Typography>\r\n                                </a>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <LoadingButton loading={state.loading} onClick={tryLogin} disabled={state.email && state.password ? false : true} fullWidth contained color='inherit' variant='contained' sx={{ borderRadius: 10 }} >Try</LoadingButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Container>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default LoginAdmin","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\LoginUser.js",["433","434","435","436"],[],"import { Button, CircularProgress, Dialog, Grid, LinearProgress, Fade, Stack, TextField, Typography, Zoom, IconButton } from '@mui/material'\r\nimport { Box, Container } from '@mui/system'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport React from 'react'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\nimport GetWebSet from '../utils/GetWebSet'\r\nimport { Close } from '@mui/icons-material'\r\n\r\nconst LoginUser = () => {\r\n    const [state, setState] = React.useState({})\r\n    const history = useHistory()\r\n    const { web_set } = GetWebSet()\r\n\r\n\r\n    function tryLogin() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/login`, {\r\n            email: state.email,\r\n            password: state.password\r\n        }).then((res) => {\r\n            setState({ ...state, loading: false })\r\n            if (res.data.success) {\r\n                localStorage.setItem(process.env.REACT_APP_TOKEN + \"_user\", res.data.token)\r\n                history.push('/user')\r\n                return\r\n            }\r\n            alert(res.data.msg)\r\n            console.log(res.data)\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            setState({ ...state, loading: false })\r\n        })\r\n    }\r\n\r\n    function trySignup() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/signup_user`, {\r\n            name: state.signup_name,\r\n            email: state.signup_email,\r\n            password: state.signup_password,\r\n            mobile: state.signup_mobile\r\n        }).then((res) => {\r\n            alert(res.data.msg)\r\n            setState({ ...state, loading: false })\r\n            if (res.data.success) {\r\n                setState({ ...state, loading: false, is_signup: false })\r\n            }\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    function tryRecovery() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/send_recovery_link_user`, {\r\n            email: state.recovery_email\r\n        }).then((res) => {\r\n            alert(res.data.msg)\r\n            setState({ ...state, loading: false, dialog: false })\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Grid container direction={'column'} minHeight={'100vh'} alignItems='center' justifyContent={'center'} bgcolor='black'>\r\n            <Grid item>\r\n\r\n                <Dialog open={state.dialog} onClose={() => {\r\n                    setState({ ...state, dialog: false })\r\n                }} fullScreen >\r\n                    <Box minHeight={'100vh'} bgcolor={'black'} p={2}>\r\n                        <IconButton onClick={() => setState({ ...state, dialog: false })} >\r\n                            <Close />\r\n                        </IconButton>\r\n                        <Grid container minHeight={'80vh'} alignItems='center' justifyContent={'center'}>\r\n                            <Grid minWidth={400} item>\r\n                                <Stack alignItems={'flex-start'} direction={'column'} spacing={2} >\r\n                                    <TextField onChange={(e) => setState({ ...state, recovery_email: e.target.value })} size='small' label=\"Enter your email\" fullWidth />\r\n                                    <LoadingButton onClick={tryRecovery} disabled={state.recovery_email ? false : true} loading={state.loading} >Send a recover link</LoadingButton>\r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n\r\n                {\r\n                    web_set ? (\r\n                        <Container maxWidth='lg'>\r\n                            <Box minWidth={400} p={4} borderRadius={4} bgcolor='#212121'>\r\n                                <Grid container direction=\"column\" spacing={2}>\r\n                                    <Grid item>\r\n                                        <Stack mb={2} alignItems={'center'}>\r\n                                            <img style={{ borderRadius: 10 }} src={`/images/${web_set.logo}`} height=\"100%\" width=\"100\" />\r\n                                        </Stack>\r\n                                    </Grid>\r\n                                    {\r\n                                        state.is_signup ? (\r\n                                            <Fade in={true} >\r\n                                                <Box p={2}>\r\n                                                    <Stack direction={'column'} spacing={2}>\r\n                                                        <TextField size='small'\r\n                                                            onChange={(e) => setState({ ...state, signup_name: e.target.value })}\r\n                                                            label=\"Your Name\" fullWidth />\r\n                                                        <TextField size='small'\r\n                                                            onChange={(e) => setState({ ...state, signup_email: e.target.value })}\r\n                                                            label=\"Your Email\" fullWidth />\r\n                                                        <TextField type=\"number\" size='small'\r\n                                                            onChange={(e) => setState({ ...state, signup_mobile: e.target.value })}\r\n                                                            helperText=\"Entery your mobile along with your country code\" label=\"Your Mobile\" fullWidth />\r\n                                                        <TextField size='small'\r\n                                                            onChange={(e) => setState({ ...state, signup_password: e.target.value })}\r\n                                                            label=\"Your Password\" fullWidth />\r\n\r\n                                                        <LoadingButton loading={state.loading} onClick={trySignup} variant='contained' fullWidth >Go!</LoadingButton>\r\n                                                        <Button onClick={() => {\r\n                                                            setState({ ...state, is_signup: false })\r\n                                                        }} size='small' >Login</Button>\r\n                                                    </Stack>\r\n                                                </Box>\r\n                                            </Fade>\r\n                                        ) : (\r\n                                            <Zoom in={true} >\r\n                                                <Box p={2}>\r\n                                                    <Stack direction={'column'} spacing={2}>\r\n                                                        <TextField size='small' onChange={(e) => setState({ ...state, email: e.target.value })} label=\"Email\" fullWidth />\r\n\r\n                                                        <TextField size='small' onChange={(e) => setState({ ...state, password: e.target.value })} label=\"Password\" type='password' fullWidth />\r\n\r\n                                                        <Stack alignItems={'flex-end'}>\r\n                                                            <a onClick={() => {\r\n                                                                setState({ ...state, dialog: true })\r\n                                                            }} style={{ cursor: 'pointer' }} >\r\n                                                                <Typography variant='caption' color='gray' >Forget password?</Typography>\r\n                                                            </a>\r\n                                                        </Stack>\r\n\r\n                                                        <LoadingButton loading={state.loading} onClick={tryLogin} disabled={state.email && state.password ? false : true} fullWidth contained color='inherit' variant='contained' sx={{ borderRadius: 10 }} >Try</LoadingButton>\r\n\r\n                                                        <Button onClick={() => setState({ ...state, is_signup: true })} size='small' >Signup</Button>\r\n\r\n                                                        <a style={{ cursor: 'pointer' }} onClick={() => {\r\n                                                            window.open(\"https://codeyon.com\")\r\n                                                        }} >\r\n                                                            <Typography fontSize={12} align='center' color='gray' >Developed by Codeyon.com</Typography>\r\n                                                        </a>\r\n                                                    </Stack>\r\n                                                </Box>\r\n                                            </Zoom>\r\n                                        )\r\n                                    }\r\n                                </Grid>\r\n                            </Box>\r\n                        </Container>\r\n                    ) : <CircularProgress />\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default LoginUser","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\UserDashboard.js",["437","438","439"],[],"import * as React from 'react';\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport Box from '@mui/material/Box';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport List from '@mui/material/List';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport Link from '@mui/material/Link';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport { ListItemButton, ListItemIcon, ListItemText, Stack } from '@mui/material'\r\nimport { Dashboard as DashboardIcon, Logout, ForwardToInbox, SmartToy, History, Castle, Create, Face, SettingsBackupRestore } from '@mui/icons-material'\r\nimport UserDashPage from './UserDashPage';\r\nimport { useHistory } from 'react-router-dom';\r\nimport GetWebSet from '../utils/GetWebSet';\r\nimport GetUserByToken from '../utils/GetUserByToken';\r\n\r\nfunction Copyright(props) {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://codeyon.com/\">\r\n                Codeyon\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n    shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    ...(open && {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n    ({ theme, open }) => ({\r\n        '& .MuiDrawer-paper': {\r\n            position: 'relative',\r\n            whiteSpace: 'nowrap',\r\n            width: drawerWidth,\r\n            transition: theme.transitions.create('width', {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n            boxSizing: 'border-box',\r\n            ...(!open && {\r\n                overflowX: 'hidden',\r\n                transition: theme.transitions.create('width', {\r\n                    easing: theme.transitions.easing.sharp,\r\n                    duration: theme.transitions.duration.leavingScreen,\r\n                }),\r\n                width: theme.spacing(7),\r\n                [theme.breakpoints.up('sm')]: {\r\n                    width: theme.spacing(9),\r\n                },\r\n            }),\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nfunction UserDashboard() {\r\n    const [open, setOpen] = React.useState(window.innerWidth < 615 ? false : true);\r\n    const history = useHistory()\r\n    const { user_by_token } = GetUserByToken()\r\n    const { web_set } = GetWebSet()\r\n\r\n    let search = window.location.search;\r\n    let params = new URLSearchParams(search);\r\n    let foo = params.get('page');\r\n\r\n    React.useEffect(() => {\r\n        setPage(parseInt(foo) || 0)\r\n    }, [foo])\r\n\r\n    const [page, setPage] = React.useState(null)\r\n    const toggleDrawer = () => {\r\n        if (window.innerWidth < 615) {\r\n            setOpen(false)\r\n            return\r\n        }\r\n        setOpen(!open);\r\n    };\r\n\r\n    const menudata = [\r\n        {\r\n            name: \"Dashboard\",\r\n            icon: <DashboardIcon />,\r\n        },\r\n        {\r\n            name: \"Instances\",\r\n            icon: <Face />,\r\n        },\r\n        {\r\n            name: \"Send Message\",\r\n            icon: <Face />,\r\n        },\r\n        {\r\n            name: \"New Campaign\",\r\n            icon: <ForwardToInbox />,\r\n        },\r\n        {\r\n            name: \"Campaign History\",\r\n            icon: <History />,\r\n        },\r\n        {\r\n            name: \"WhatsApp Bot\",\r\n            icon: <SmartToy />,\r\n        },\r\n        {\r\n            name: \"Manage Plan\",\r\n            icon: <Castle />,\r\n        },\r\n        {\r\n            name: \"Ping to Admin\",\r\n            icon: <Create />,\r\n        },\r\n        {\r\n            name: \"Profile\",\r\n            icon: <Face />,\r\n        },\r\n        {\r\n            name: \"Reports\",\r\n            icon: <Face />,\r\n        },\r\n    ]\r\n\r\n\r\n    return (\r\n        <Box sx={{ display: 'flex' }}>\r\n            <CssBaseline />\r\n            <AppBar position=\"absolute\" open={open}>\r\n                <Toolbar\r\n                    sx={{\r\n                        pr: '24px', // keep right padding when drawer closed\r\n                    }}\r\n                >\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={toggleDrawer}\r\n                        sx={{\r\n                            marginRight: '36px',\r\n                            ...(open && { display: 'none' }),\r\n                        }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h6\"\r\n                        color=\"inherit\"\r\n                        noWrap\r\n                        sx={{ flexGrow: 1 }}\r\n                    >\r\n                        Hi{user_by_token && \", \" + user_by_token.name}!\r\n                    </Typography>\r\n                    <IconButton onClick={() => {\r\n                        if (window.confirm(\"Are your sure?\")) {\r\n                            localStorage.removeItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n                            history.push('/user')\r\n                        }\r\n                    }} color=\"inherit\">\r\n                        <Logout />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer variant=\"permanent\" open={open}>\r\n                <Toolbar\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'flex-end',\r\n                        px: [1],\r\n                    }}\r\n                >\r\n                    <Stack direction='row' alignItems={'center'} spacing={2}>\r\n                        {\r\n                            <Typography fontWeight={'bold'} color='white' >{web_set && web_set.app_name}</Typography>\r\n                        }\r\n                        <IconButton onClick={toggleDrawer}>\r\n                            <ChevronLeftIcon />\r\n                        </IconButton>\r\n                    </Stack>\r\n                </Toolbar>\r\n                <Divider />\r\n                <List component=\"nav\">\r\n                    {\r\n                        menudata.map((item, key) => {\r\n                            return (\r\n                                <ListItemButton style={{ backgroundColor: page === key ? \"#212121\" : null }} onClick={() => {\r\n                                    history.push(`/user?page=${key}`)\r\n                                    setPage(key)\r\n                                }} key={key} >\r\n                                    <ListItemIcon>\r\n                                        {item.icon}\r\n                                    </ListItemIcon>\r\n                                    <ListItemText secondary={item.name} />\r\n                                </ListItemButton>\r\n                            )\r\n                        })\r\n                    }\r\n                </List>\r\n            </Drawer>\r\n            <Box\r\n                component=\"main\"\r\n                sx={{\r\n                    flexGrow: 1,\r\n                    height: '100vh',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n\r\n                <Toolbar />\r\n                <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n                    <Grid container spacing={3}>\r\n                        {/* Recent Orders */}\r\n                        <Grid item xs={12}>\r\n                            <Paper sx={{ display: 'flex', flexDirection: 'column' }}>\r\n                                <UserDashPage page={parseInt(page)} />\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Copyright sx={{ pt: 4 }} />\r\n                </Container>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default function Dashboard() {\r\n    return <UserDashboard />;\r\n}","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\DonePage.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\context\\GlobalContext.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetWebSet.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\recovery\\RecoverUser.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\recovery\\RecoverAdmin.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\installation\\InstallApp.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\DocScreen.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetUserByToken.js",["440"],[],"import axios from 'axios'\r\nimport React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst GetUserByToken = () => {\r\n    const [user_by_token, setState] = React.useState(\"\")\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const history = useHistory()\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/user/get_user_by_token`, {\r\n            headers: {\r\n                Authorization: \"Beare \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (res.data.logout) {\r\n                localStorage.removeItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n                history.push(\"/user/login\")\r\n            }\r\n            if (!res.data.success) {\r\n                console.log(res.data)\r\n            }\r\n            setState(res.data.data)\r\n        })\r\n            .catch((err) => console.log(err))\r\n    }, [token])\r\n    return { user_by_token }\r\n}\r\n\r\nexport default GetUserByToken","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\DashboardPage.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\context\\AdminContext.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\UserDashPage.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\doc\\MongoComp.js",["441"],[],"import { Box, CardMedia, Divider, Typography } from '@mui/material'\r\nimport React from 'react'\r\n\r\nconst MongoComp = () => {\r\n    return (\r\n        <Box>\r\n            <Typography align='center' fontWeight={'bold'} variant='h5' >MongoDB Configuration</Typography>\r\n\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 1: Search MySQL</Typography>\r\n                <Typography fontSize={15} color=\"gray\"  >Login into you cpanel or your panel and search for mysql.</Typography>\r\n\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/ms0.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 2: Create Database</Typography>\r\n                <Typography fontSize={15} color=\"gray\"  >Write a database name and click on create database button.</Typography>\r\n\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/ms1.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 3: Create User</Typography>\r\n                <Typography fontSize={15} color=\"gray\"  >Write a user name and click on create database button.</Typography>\r\n\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/ms2.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 4: Grant permissions</Typography>\r\n                <Typography fontSize={15} color=\"gray\"  >Go to \"Add User To Database\" and choose your created user and database then click on ad give a checkmark to ALL PRIVILEGES and hit \"Make Changes\" button.</Typography>\r\n\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/ms3.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 4: Add credentials into code</Typography>\r\n                <Typography fontSize={15} color=\"gray\"  >Go to the code root folder then edit .env file add your database credentials there. Also you can change JWTKEY if you know what is this or keep it as it is.</Typography>\r\n\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/ms5.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default MongoComp","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\doc\\ReqComp.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\doc\\DeployComp.js",["442"],[],"import { Box, CardMedia, Divider, Typography } from '@mui/material'\r\nimport { Stack } from '@mui/system'\r\nimport React from 'react'\r\n\r\nconst DeployComp = () => {\r\n    return (\r\n        <Box>\r\n            <Typography align='center' fontWeight={'bold'} variant='h5' >Deploy App</Typography>\r\n\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 1: Creating Folder</Typography>\r\n                <Typography fontSize={15} color=\"gray\"   >Open you file manager and create a folder</Typography>\r\n\r\n                <Box mt={2} mb={4}>\r\n                    <CardMedia src='/documentation/node_one.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n\r\n                <Typography fontSize={15} color=\"gray\"   >Open your folder and upload upload_this.zip file</Typography>\r\n                <Box mt={2} mb={4}>\r\n                    <CardMedia src='/documentation/nodee.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n                <Typography fontSize={15} color=\"gray\"   >Extract upload_this.zip file in the folder</Typography>\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/nodeee.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 2: Search NodeJs</Typography>\r\n                <Typography fontSize={15} color=\"gray\"   >Go to Cpanel and search for NodeJs (Contact to your hostinger provider if its not exist or go to https://codeyonhost.com to get cheap one)</Typography>\r\n\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/node_two.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 3: Follow Below</Typography>\r\n                <Typography fontSize={15} color=\"gray\"   >Open NodeJs and follow these steps</Typography>\r\n\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/node_two.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n                <Box mt={2} >\r\n                    <CardMedia src='/documentation/node_three.jpg' component=\"img\" height={'100%'} />\r\n                    <Stack direction={'column'}>\r\n                        <Typography mt={2} >Go to .env file and add all the variables here</Typography>\r\n                        <Typography fontStyle={'italic'} color='gray' variant='caption' >JWTKEY=</Typography>\r\n                        <Typography fontStyle={'italic'} color='gray' variant='caption' >DBHOST=</Typography>\r\n                        <Typography fontStyle={'italic'} color='gray' variant='caption' >DBUSER=</Typography>\r\n                        <Typography fontStyle={'italic'} color='gray' variant='caption' >DATABASE=</Typography>\r\n                        <Typography fontStyle={'italic'} color='gray' variant='caption' >DBPASSWORD=</Typography>\r\n                        <Typography fontStyle={'italic'} color='gray' variant='caption' >DBPORT=</Typography>\r\n                    </Stack>\r\n                </Box>\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/node_four.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/node_five.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/node_six.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n                <Box mt={2}>\r\n                    <CardMedia src='/documentation/node_seven.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Step 4: Install App</Typography>\r\n                <Typography fontSize={15} color=\"gray\"   >Go to yourdomain.com/install and install the app.</Typography>\r\n\r\n                <Box border={1} mt={2}>\r\n                    <Box bgcolor={\"#1B1B1B\"} p={2}>\r\n                        <Stack spacing={1} direction={'row'}>\r\n                            <Box bgcolor={'red'} p={0.8} borderRadius=\"50%\" />\r\n                            <Box bgcolor={'yellow'} p={0.8} borderRadius=\"50%\" />\r\n                            <Box bgcolor={'green'} p={0.8} borderRadius=\"50%\" />\r\n                        </Stack>\r\n                    </Box>\r\n                    <CardMedia src='/documentation/node_eight.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default DeployComp","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\documentation\\doc\\AppIntro.js",["443","444","445"],[],"import { Box, Button, CardMedia, Divider, Typography } from '@mui/material'\r\nimport React from 'react'\r\n\r\nconst AppIntro = () => {\r\n    return (\r\n        <Box>\r\n            <Typography align='center' fontWeight={'bold'} variant='h5' >WebApp Setup</Typography>\r\n\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Setup SMTP</Typography>\r\n                <Typography fontSize={15} color=\"gray\"  >Go to admin panel yourdomain.com/admin and SMTP config option. Without this settings your forget password won't work</Typography>\r\n\r\n                <Box mt={2} mb={4}>\r\n                    <CardMedia src='/documentation/o1.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n\r\n            <Box mb={6} mt={2} >\r\n                <Typography fontWeight={'bold'} variant='h6'>Setup Payment Gateways</Typography>\r\n                <Typography fontSize={15} color=\"gray\"  >Add your payment credentials here. Payment options won't work if you enter wrong details here.</Typography>\r\n\r\n                <Box mt={2} mb={4}>\r\n                    <CardMedia src='/documentation/o2.jpg' component=\"img\" height={'100%'} />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box mt={2} p={4} bgcolor='orange' borderRadius={2}>\r\n                <Typography color='black' >⁍ ‣ For support or installation service shoot an email at <a\r\n                    onClick={() => window.open('mailto:hello@hamidsaifi.com')}\r\n                    style={{ color: 'black', cursor: 'pointer', fontWeight: 'bolder' }} >hello@hamidsaifi.com</a> </Typography>\r\n            </Box>\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default AppIntro","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\DashScreen.js",["446"],[],"import React from 'react'\r\nimport { Stack, Typography, Box, Grid, LinearProgress } from '@mui/material'\r\nimport { SupervisedUserCircle, MovieCreation, Message, ReceiptLong } from '@mui/icons-material'\r\nimport axios from 'axios'\r\n\r\nconst DashScreen = () => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n\r\n    function getDash() {\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/user/get_admin_dashboard`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            setState({ data: res.data })\r\n        })\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        getDash()\r\n    }, [token])\r\n\r\n    return (\r\n        <Box p={2} >\r\n            {\r\n                state.data ? (\r\n                    <Grid container spacing={2}>\r\n                        <Grid xs={12} sm={6} lg={6} item>\r\n                            <Box bgcolor='black' borderRadius={3} p={2} >\r\n                                <Stack direction='row' spacing={2} justifyContent='space-between'>\r\n                                    <Box>\r\n                                        <Typography>\r\n                                            Total User\r\n                                        </Typography>\r\n                                        <Typography variant='caption' color='gray' >\r\n                                            {state.data.user}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <SupervisedUserCircle />\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={12} sm={6} lg={6} item>\r\n                            <Box bgcolor='black' borderRadius={3} p={2} >\r\n                                <Stack direction='row' spacing={2} justifyContent='space-between'>\r\n                                    <Box>\r\n                                        <Typography>\r\n                                            Total Plans\r\n                                        </Typography>\r\n                                        <Typography variant='caption' color='gray' >\r\n                                            {state.data.plan}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <MovieCreation />\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={12} sm={6} lg={6} item>\r\n                            <Box bgcolor='black' borderRadius={3} p={2} >\r\n                                <Stack direction='row' spacing={2} justifyContent='space-between'>\r\n                                    <Box>\r\n                                        <Typography>\r\n                                            Pending User's Ping\r\n                                        </Typography>\r\n                                        <Typography variant='caption' color='gray' >\r\n                                            {state.data.ping}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <Message />\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={12} sm={6} lg={6} item>\r\n                            <Box bgcolor='black' borderRadius={3} p={2} >\r\n                                <Stack direction='row' spacing={2} justifyContent='space-between'>\r\n                                    <Box>\r\n                                        <Typography>\r\n                                            Total Orders\r\n                                        </Typography>\r\n                                        <Typography variant='caption' color='gray' >\r\n                                            {state.data.orders}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <ReceiptLong />\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                ) : <LinearProgress />\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default DashScreen","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\app-config.js\\AppConfig.js",["447","448","449"],[],"import { AddPhotoAlternate } from '@mui/icons-material'\r\nimport { Button, Divider, LinearProgress, TextField, Typography } from '@mui/material'\r\nimport { Box, Stack } from '@mui/system'\r\nimport React from 'react'\r\nimport GetWebSet from '../../../utils/GetWebSet'\r\nimport { SketchPicker } from 'react-color'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport { useHistory } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nconst AppConfig = () => {\r\n    const { web_set } = GetWebSet()\r\n    const [state, setState] = React.useState({})\r\n    const [web, setWeb] = React.useState(\"\")\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n    const history = useHistory()\r\n\r\n    React.useEffect(() => {\r\n        setWeb({ ...web_set })\r\n    }, [web_set])\r\n\r\n\r\n    function updateWeb(e) {\r\n        e.preventDefault()\r\n        const fd = new FormData()\r\n        setState({ ...state, loading: true })\r\n        fd.append('app_name', web.app_name)\r\n        fd.append('file', state.logo_image)\r\n        fd.append('currency_symbol', web.currency_symbol)\r\n        // fd.append('theme_color', web.theme_color)\r\n\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/web/update_set`, fd, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (res.data.logout) {\r\n                localStorage.removeItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n                history.push('/admin')\r\n            }\r\n            alert(res.data.msg)\r\n            setState({ ...state, loading: false })\r\n            if (!res.data.success) {\r\n                console.log(res.data)\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            setState({ ...state, loading: true })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box p={2} >\r\n            <Stack alignItems={'center'} direction={'row'} justifyContent='space-between'>\r\n                <Typography fontWeight={'bold'} >App Config</Typography>\r\n            </Stack>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n\r\n            {\r\n                web_set ? (\r\n                    <form onSubmit={updateWeb} encType='formdata/multi-part' >\r\n                        <Stack direction={'column'} spacing={2}>\r\n                            <Stack alignItems='center' border={1} borderRadius={2} p={2}>\r\n                                <Button variant='outlined' component=\"label\">\r\n                                    <input\r\n                                        accept=\"image/png, image/jpeg, image/jpg\"\r\n                                        type=\"file\"\r\n                                        hidden\r\n                                        onChange={(e) => setState({ ...state, logo_image: e.target.files[0] })}\r\n                                    />\r\n                                    {\r\n                                        state.logo_image ? (\r\n                                            <img src={URL.createObjectURL(state.logo_image)} style={{ height: 200, width: 200, borderRadius: 5 }} />\r\n                                        ) : (\r\n                                            web.logo ? (\r\n                                                <img src={`/images/${web.logo}`} style={{ height: 200, width: 200, borderRadius: 5 }} />\r\n                                            ) : <AddPhotoAlternate sx={{ height: 200, width: 200 }} />\r\n                                        )\r\n                                    }\r\n                                </Button>\r\n                                <Typography>LOGO</Typography>\r\n\r\n                            </Stack>\r\n\r\n\r\n                            <TextField required onChange={(e) => setWeb({ ...web, app_name: e.target.value })} InputLabelProps={{ shrink: true }} value={web.app_name} label=\"App Name\" fullWidth size=\"small\" />\r\n                            <TextField required onChange={(e) => setWeb({ ...web, currency_symbol: e.target.value })} InputLabelProps={{ shrink: true }} value={web.currency_symbol} label=\"Currency Symbol\" fullWidth size=\"small\" />\r\n\r\n                            {/* <Stack alignItems={'flex-start'}>\r\n                                <Box p={2} bgcolor='black' borderRadius={2} border={1} borderColor={web.theme_color} >\r\n                                    <Typography sx={{ mb: 2 }} color='gray' align='center' >Choose Theme Color</Typography>\r\n                                    <SketchPicker color={web.theme_color} onChangeComplete={(e) => setWeb({ ...web, theme_color: e.hex })} />\r\n                                </Box>\r\n                            </Stack> */}\r\n\r\n                            <LoadingButton loading={state.loading} type=\"submit\" variant='contained' >Save</LoadingButton>\r\n\r\n                        </Stack>\r\n                    </form>\r\n                ) : (\r\n                    <LinearProgress />\r\n                )\r\n            }\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default AppConfig","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\manage-plans\\ManagePlans.js",["450"],[],"import React from 'react'\r\nimport { Box, Button, Dialog, Divider, IconButton, LinearProgress, Typography } from '@mui/material'\r\nimport { Stack } from '@mui/system'\r\nimport DialogHeader from '../../../common/DialogHeader'\r\nimport { Close, Delete } from '@mui/icons-material'\r\nimport AddPlan from './AddPlan'\r\nimport { GlobalContext } from '../../../context/GlobalContext'\r\nimport GetPlans from '../../../utils/GetPlans'\r\nimport axios from 'axios'\r\nimport GetTokenAdmin from '../../../utils/GetTokenAdmin'\r\n\r\nconst ManagePlans = () => {\r\n    const [state, setState] = React.useState({\r\n        dialog: false\r\n    })\r\n    const globalContext = React.useContext(GlobalContext)\r\n    const { plan_data } = GetPlans()\r\n    const { token_admin } = GetTokenAdmin()\r\n\r\n    async function deletePlan(e) {\r\n        if (window.confirm(\"Are you sure?\")) {\r\n            setState({ ...state, loading: true })\r\n            const res = await axios.post(`${process.env.REACT_APP_BASE_URL}/api/plan/delete`, {\r\n                id: e.id\r\n            }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token_admin\r\n                }\r\n            })\r\n            alert(res.data.msg)\r\n            if (!res.data.success) {\r\n                console.log(res.data)\r\n                return\r\n            }\r\n            removeArr(e)\r\n        }\r\n\r\n    }\r\n\r\n    function removeArr(e) {\r\n        const update = globalContext.data.plan_data.filter(i => i !== e)\r\n        globalContext.setData({ ...globalContext.data, plan_data: update })\r\n    }\r\n\r\n    return (\r\n        <Box p={2} >\r\n            <Stack alignItems={'center'} direction={'row'} justifyContent='space-between'>\r\n                <Typography fontWeight={'bold'} >Manage Plans</Typography>\r\n                <Button onClick={() => setState({ ...state, dialog: true })} size='small'>add new</Button>\r\n            </Stack>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n            <Dialog open={state.dialog} onClose={() => setState({ ...state, dialog: false })} fullScreen>\r\n                <DialogHeader\r\n                    closebtn={\r\n                        <IconButton onClick={() => setState({ ...state, dialog: false })} >\r\n                            <Close />\r\n                        </IconButton>}\r\n                />\r\n                <AddPlan />\r\n            </Dialog>\r\n\r\n            <Stack direction={'column'} spacing={2}>\r\n                {\r\n                    globalContext.data.plan_data ? globalContext.data.plan_data.map((i, key) => {\r\n                        return (\r\n                            <Box borderRadius={2} bgcolor='#131313' p={2}>\r\n                                <Stack direction={'row'} justifyContent='space-between'>\r\n                                    <Stack direction={'column'}>\r\n                                        <Typography>{i.name}</Typography>\r\n                                        <Typography variant='caption' color='gray'>Message Limit: {i.message_limit}</Typography>\r\n                                        <Typography variant='caption' color='gray'>Cost: {i.cost}</Typography>\r\n                                    </Stack>\r\n                                    <IconButton onClick={() => {\r\n                                        deletePlan(i)\r\n                                    }} color='error' >\r\n                                        <Delete />\r\n                                    </IconButton>\r\n                                </Stack>\r\n                            </Box>\r\n                        )\r\n                    }) : <LinearProgress />\r\n                }\r\n            </Stack>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ManagePlans","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\manage-users\\ManageUsers.js",["451"],[],"import React from 'react'\r\nimport GetAllUserAdmin from '../../../utils/GetAllUserAdmin'\r\nimport { AdminContext } from '../../../context/AdminContext'\r\nimport { DataGrid, GridToolbarContainer, GridToolbarExport } from '@mui/x-data-grid';\r\nimport { Box, CircularProgress, Dialog, Grid, IconButton, LinearProgress, Typography } from '@mui/material'\r\nimport { Close, Edit, Login } from '@mui/icons-material';\r\nimport DialogHeader from '../../../common/DialogHeader';\r\nimport EditUser from './components/EditUser'\r\nimport axios from 'axios'\r\n\r\nfunction CustomToolbar() {\r\n    return (\r\n        <GridToolbarContainer>\r\n            <Box p={2} width={'100%'}  >\r\n                <Grid container justifyContent={'space-between'} spacing={2}>\r\n                    <Grid item>\r\n                        <Typography variant='h5' >All Users</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <GridToolbarExport />\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </GridToolbarContainer>\r\n    );\r\n}\r\n\r\nconst ManageUsers = () => {\r\n    const [state, setState] = React.useState({\r\n        dialog: false\r\n    })\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n\r\n    const adminContext = React.useContext(AdminContext)\r\n    const { all_users } = GetAllUserAdmin()\r\n    React.useEffect(() => {\r\n        if (!all_users) {\r\n            return\r\n        }\r\n        adminContext.setData({ ...adminContext.data, all_users: all_users })\r\n    }, [all_users])\r\n\r\n\r\n    function direcLogin(e) {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/direct_login`, {\r\n            uid: e\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            setState({ ...state, loading: false })\r\n            localStorage.setItem(process.env.REACT_APP_TOKEN + \"_user\", res.data.token)\r\n            window.open('/user')\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n            <Dialog fullScreen open={state.dialog} onClose={() => setState({ ...state, dialog: false })} >\r\n                <DialogHeader title=\"Edit User\"\r\n                    closebtn={<IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        onClick={() => {\r\n                            setState({ ...state, dialog: false })\r\n                        }}\r\n                        aria-label=\"close\"\r\n                    >\r\n                        <Close />\r\n                    </IconButton>} />\r\n                <EditUser user={state.user} />\r\n            </Dialog>\r\n            {\r\n                adminContext.data.all_users ? (\r\n                    <Box height='80vh'>\r\n                        <DataGrid\r\n                            getRowId={(row) => row.id}\r\n                            rows={[...adminContext.data.all_users].reverse()}\r\n                            columns={[\r\n                                {\r\n                                    headerName: \"Login\", field: 'uid', flex: 1, renderCell: data =>\r\n                                        state.loading ? (\r\n                                            <CircularProgress size={25} />\r\n                                        ) : (\r\n                                            <IconButton\r\n                                                onClick={() => direcLogin(data.row.uid)}\r\n                                            >\r\n                                                <Login />\r\n                                            </IconButton>\r\n                                        )\r\n                                },\r\n                                { headerName: \"Name\", field: 'name', flex: 1, },\r\n                                { headerName: \"Email\", field: 'email', flex: 1, },\r\n                                { headerName: \"Mobile\", field: 'mobile', flex: 1, },\r\n                                {\r\n                                    headerName: \"Update\", field: 'id', flex: 1, renderCell: data => <IconButton onClick={() => {\r\n                                        setState({ ...state, dialog: true, user: data.row })\r\n                                    }} >\r\n                                        <Edit />\r\n                                    </IconButton>\r\n                                },\r\n                            ]}\r\n                            pageSize={50}\r\n                            rowsPerPageOptions={[50]}\r\n                            checkboxSelection={false}\r\n                            components={{\r\n                                Toolbar: CustomToolbar,\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                ) : <LinearProgress />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManageUsers","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\ping-user\\PingFromUser.js",["452"],[],"import { Box, Divider, Stack, Typography, Accordion, AccordionSummary, AccordionDetails, LinearProgress, TextField, IconButton } from '@mui/material'\r\nimport axios from 'axios'\r\nimport React from 'react'\r\nimport moment from 'moment'\r\nimport { DoneAll, Send, Done, ExpandMore, Delete } from '@mui/icons-material'\r\n\r\nconst PingFromUser = () => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n\r\n    function getMessages() {\r\n        setState({ ...state, loading: true })\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/ping/get_all`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => setState({ ...state, messages: res.data.data, loading: false, admin_response: \"\" }))\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        getMessages()\r\n    }, [token])\r\n\r\n    function sendRes(e) {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/ping/respond`, {\r\n            id: e,\r\n            admin_response: state.admin_response\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            alert(res.data.msg)\r\n            if (!res.data.success) {\r\n                console.log(res.data)\r\n            }\r\n            setState({ ...state, loading: false, admin_response: \"\" })\r\n            getMessages()\r\n        })\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    function deleteMsg(e) {\r\n        if (window.confirm(`Are your sure you want to delete this message?`)) {\r\n            setState({ ...state, loading: true })\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/ping/delete`, {\r\n                id: e\r\n            }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                alert(res.data.msg)\r\n                if (!res.data.success) {\r\n                    console.log(res.data)\r\n                }\r\n                setState({ ...state, loading: false })\r\n                getMessages()\r\n            })\r\n                .catch((err) => console.log(err))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box p={2} >\r\n\r\n            <Box>\r\n                <Stack justifyContent={'space-between'} alignItems='center' direction={'row'} spacing={2}>\r\n                    <Typography fontWeight={'bold'} >Manage Pings</Typography>\r\n                </Stack>\r\n            </Box>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n\r\n            <Box>\r\n                <Stack direction={'column'} spacing={2}>\r\n                    {\r\n                        state.messages ? [...state.messages].reverse().map((item, key) => {\r\n                            return (\r\n                                <Accordion key={key} >\r\n                                    <AccordionSummary\r\n                                        sx={{ bgcolor: item.admin_response ? \"green\" : 'black', borderRadius: 2 }}\r\n                                        expandIcon={<ExpandMore />}\r\n                                        aria-controls=\"panel1a-content\"\r\n                                        id=\"panel1a-header\"\r\n                                    >\r\n                                        <Typography variant='caption' >{key + 1}) {item.message} {item.admin_response ? <DoneAll sx={{ color: 'lightgreen', height: 15, width: 15 }} /> : <Done sx={{ color: 'lightgreen', height: 15, width: 15 }} />}</Typography>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails>\r\n                                        <Typography>\r\n                                            <Typography sx={{ mb: 2 }} fontSize={12} color='gray' >{\r\n                                                item.admin_response ? (\r\n                                                    item.admin_response\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <TextField sx={{ mt: 1 }} value={state.admin_response} onChange={(e) => setState({ ...state, admin_response: e.target.value })} fullWidth label=\"Enter your response\" size=\"small\" rows={4} multiline />\r\n                                                        <Stack mt={2} direction={'row'} justifyContent={'space-between'} spacing={2} alignItems='center'>\r\n                                                            <IconButton onClick={() => sendRes(item.id)} disabled={state.admin_response ? false : true} >\r\n                                                                <Send />\r\n                                                            </IconButton>\r\n                                                        </Stack>\r\n                                                    </>\r\n                                                )\r\n                                            }</Typography>\r\n                                            <Divider />\r\n                                            <Stack mt={2} direction={'row'} justifyContent={'space-between'} spacing={2} alignItems='center'>\r\n                                                <Typography sx={{ mt: 2 }} align='right' fontSize={12} color='gray' >Sent on: {moment(item.createdAt).format('DD-MMMM-YYYY')}</Typography>\r\n                                                <IconButton onClick={() => deleteMsg(item.id)} >\r\n                                                    <Delete sx={{ color: 'red' }} />\r\n                                                </IconButton>\r\n                                            </Stack>\r\n                                        </Typography>\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            )\r\n                        }) : (\r\n                            <LinearProgress />\r\n                        )\r\n                    }\r\n                </Stack>\r\n            </Box>\r\n        </Box >\r\n    )\r\n}\r\n\r\nexport default PingFromUser","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\smtp-config\\SMTPConfig.js",["453","454"],[],"import { Refresh } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport { Box, Divider, LinearProgress, Stack, TextField, Typography } from '@mui/material'\r\nimport axios from 'axios'\r\nimport React from 'react'\r\nimport GetWebSet from '../../../utils/GetWebSet'\r\n\r\n\r\nconst SMTPConfig = () => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n    const [smtp, setSmtp] = React.useState(\"\")\r\n    const { web_set } = GetWebSet()\r\n\r\n    React.useEffect(() => {\r\n        setSmtp(web_set)\r\n    }, [web_set])\r\n\r\n    function updateSet() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/web/update_smtp`, {\r\n            smtp_host: smtp.smtp_host,\r\n            smtp_port: smtp.smtp_port,\r\n            smtp_email: smtp.smtp_email,\r\n            smtp_password: smtp.smtp_password\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            alert(res.data.msg)\r\n            setState({ ...state, loading: false })\r\n            if (!res.data.success) {\r\n                console.log(res.data)\r\n            }\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    function testSet() {\r\n        setState({ ...state, loading: true })\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/user/check_smtp`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            alert(res.data.msg)\r\n            setState({ ...state, loading: false })\r\n            console.log(res.data)\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Box p={2}>\r\n            <Box>\r\n                <Stack justifyContent={'space-between'} alignItems='center' direction={'row'} spacing={2}>\r\n                    <Typography fontWeight={'bold'} >SMTP Settings</Typography>\r\n                </Stack>\r\n            </Box>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n\r\n            <Stack direction='column' spacing={2}>\r\n                {\r\n                    smtp ? (\r\n                        <>\r\n                            <Box bgcolor='orange' p={2} borderRadius={2}>\r\n                                <Typography color='black' >Without this setting your forget password option won't work.</Typography>\r\n                            </Box>\r\n                            <TextField value={smtp.smtp_host} onChange={(e) => setSmtp({ ...smtp, smtp_host: e.target.value })} label=\"SMTP Host\" size='small' fullWidth />\r\n                            <TextField value={smtp.smtp_port} onChange={(e) => setSmtp({ ...smtp, smtp_port: e.target.value })} label=\"SMTP Port\" size='small' fullWidth />\r\n                            <TextField value={smtp.smtp_email} onChange={(e) => setSmtp({ ...smtp, smtp_email: e.target.value })} label=\"Email\" size='small' fullWidth />\r\n                            <TextField value={smtp.smtp_password} onChange={(e) => setSmtp({ ...smtp, smtp_password: e.target.value })} label=\"SMTP Password\" size='small' fullWidth />\r\n                            <LoadingButton disabled={smtp.smtp_host && smtp.smtp_port && smtp.smtp_email && smtp.smtp_password ? false : true} loading={state.loading} onClick={updateSet} variant='contained' fullWidth >Save</LoadingButton>\r\n                            {/* <LoadingButton onClick={testSet} loading={state.loading} endIcon={<Refresh />} sx={{ textTransform: 'none' }} variant='outlined' fullWidth >Test Config</LoadingButton> */}\r\n                        </>\r\n                    ) : <LinearProgress />\r\n                }\r\n            </Stack>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SMTPConfig","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\trans-log\\TransLog.js",["455","456","457","458","459"],[],"import { ChevronRight, ExpandMore, FileDownload } from '@mui/icons-material'\r\nimport { LoadingButton, TreeItem, TreeView } from '@mui/lab'\r\nimport { Box, Divider, Typography, Stack, Accordion, AccordionSummary, AccordionDetails, LinearProgress } from '@mui/material'\r\nimport axios from 'axios'\r\nimport React from 'react'\r\nimport moment from 'moment'\r\n\r\nconst TransLog = () => {\r\n    const [order, setOrder] = React.useState(\"\")\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n\r\n    function getOrder() {\r\n        setState({ ...state, loading: true })\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/order/get_all_orders_admin`, {\r\n            headers: {\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        }).then((res) => {\r\n            setOrder(res.data.data)\r\n            setState({ ...state, loading: false })\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        getOrder()\r\n    }, [token])\r\n\r\n\r\n    function clearAll(e) {\r\n        if (window.confirm(`Are your sure you want to delete all logs ?`)) {\r\n            setState({ ...state, loading: true })\r\n            axios.get(`${process.env.REACT_APP_BASE_URL}/api/order/clear_all_log`, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                setState({ ...state, loading: false })\r\n                if (!res.data.success) {\r\n                    console.log(res.data)\r\n                }\r\n                alert(res.data.msg)\r\n                getOrder()\r\n            }).catch((err) => {\r\n                console.log(err)\r\n                setState({ ...state, loading: false })\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Box p={2} >\r\n            <Box>\r\n                <Stack justifyContent={'space-between'} alignItems='center' direction={'row'} spacing={2}>\r\n                    <Typography fontWeight={'bold'} >Transaction Log(s)</Typography>\r\n                    <Stack direction={'row'} spacing={1}>\r\n                        <LoadingButton loading={state.loading} onClick={clearAll} color='error' variant='contained' sx={{ textTransform: 'none' }} >Clear All</LoadingButton>\r\n                    </Stack>\r\n                </Stack>\r\n            </Box>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n\r\n            <Stack direction={'column'} spacing={2}>\r\n                {\r\n                    order ? (\r\n                        [...order].reverse().map((item, key) => {\r\n                            return (\r\n                                <Accordion key={key} >\r\n                                    <AccordionSummary\r\n                                        sx={{ backgroundColor: '#1D5469', borderRadius: 2 }}\r\n                                        expandIcon={<ExpandMore />}\r\n                                    >\r\n                                        <Typography>{item.order_type}</Typography>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails>\r\n                                        <Stack direction={'column'} spacing={0.5} >\r\n                                            <Typography color='gray' variant='caption'>\r\n                                                Buyer Email: {JSON.parse(item.user_data).email}\r\n                                            </Typography>\r\n                                            <Typography color='gray' variant='caption'>\r\n                                                Payment ID: {JSON.parse(item.transaction).id}\r\n                                            </Typography>\r\n                                            <Typography color='gray' variant='caption'>\r\n                                                Status: {JSON.parse(item.transaction).status}\r\n                                            </Typography>\r\n                                            {\r\n                                                item.order_type === \"Razorpay\" && (\r\n                                                    <Typography color='gray' variant='caption'>\r\n                                                        Amount: {JSON.parse(item.transaction).amount / 100} {JSON.parse(item.transaction).currency}\r\n                                                    </Typography>\r\n                                                )\r\n                                            }\r\n                                            {\r\n                                                item.order_type === \"Paypal\" && (\r\n                                                    <Typography color='gray' variant='caption'>\r\n                                                        Amount: {JSON.parse(item.transaction).gross_total_amount.value} {JSON.parse(item.transaction).gross_total_amount.currency}\r\n                                                    </Typography>\r\n                                                )\r\n                                            }\r\n                                            <Typography color='gray' variant='caption'>\r\n                                                Caprure Date & Time: {moment(item.createdAt).format('DD-MMMM-YYYY / h:mm:ss a')}\r\n                                            </Typography>\r\n                                        </Stack>\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            )\r\n                        })\r\n                    ) : <LinearProgress />\r\n                }\r\n            </Stack>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default TransLog","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\payment-gateways\\ManagePayGateway.js",["460","461","462"],[],"import { Box, Typography, Divider, Stack, Switch, TextField, LinearProgress } from '@mui/material'\r\nimport React from 'react'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\nimport GetWebSet from '../../../utils/GetWebSet'\r\n\r\nconst ManagePayGateway = () => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n    const history = useHistory()\r\n    const { web_set } = GetWebSet()\r\n\r\n    React.useEffect(() => {\r\n        setState({ ...web_set })\r\n    }, [web_set])\r\n\r\n    function updateWeb() {\r\n\r\n        setState({ ...state, loading: true })\r\n\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/web/update`, {\r\n            rz_is_is_active: state.rz_is_is_active,\r\n            rz_key: state.rz_key,\r\n            rz_id: state.rz_id,\r\n            offline_is_active: state.offline_is_active,\r\n            offline_msg: state.offline_msg,\r\n            paypal_is_active: state.paypal_is_active,\r\n            exchange_rate: state.exchange_rate,\r\n            paypal_client_id: state.paypal_client_id,\r\n            paypal_client_secret: state.paypal_client_secret\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            setState({ ...state, loading: false })\r\n            if (res.data.logout) {\r\n                localStorage.removeItem('webtorrent_admin')\r\n                history.push('/admin')\r\n            }\r\n            alert(res.data.msg)\r\n            setState({ ...state, loading: false })\r\n            if (!res.data.success) {\r\n                console.log(res.data)\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            setState({ ...state, loading: true })\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Box p={2}>\r\n            {\r\n                state.id ? (\r\n                    <>\r\n                        <Stack justifyContent={'space-between'} alignItems='center' direction={'row'} >\r\n                            <Typography fontWeight={'bold'} >Payment Gateways</Typography>\r\n                            <LoadingButton disabled={state.exchange_rate ? false : true} onClick={updateWeb} loading={state.loading} color='secondary' variant='contained' sx={{ textTransform: 'none' }} >Save</LoadingButton>\r\n                        </Stack>\r\n                        <Box mt={2} mb={2}>\r\n                            <Divider />\r\n                        </Box>\r\n\r\n                        <TextField type='number' value={state.exchange_rate} onChange={(e) => setState({ ...state, exchange_rate: e.target.value })} helperText=\"(Please Enter The Exchange Rate For 1 USD = ?)\" label='Exchange Rate *' fullWidth size=\"small\" />\r\n\r\n                        <Box mt={2} mb={2}>\r\n                            <Divider />\r\n                        </Box>\r\n\r\n                        <Stack direction={'row'} spacing={2} justifyContent={'space-between'} alignItems='center'>\r\n                            <Typography>Razorpay</Typography>\r\n                            <Switch checked={state.rz_is_is_active} onChange={() => {\r\n                                setState({ ...state, rz_is_is_active: state.rz_is_is_active == 0 ? 1 : 0 })\r\n                            }} />\r\n                        </Stack>\r\n                        <Stack mt={2} direction={'column'} spacing={2}>\r\n                            <TextField value={state.rz_key} onChange={(e) => setState({ ...state, rz_key: e.target.value })} label='Rz Keys' fullWidth size=\"small\" />\r\n                            <TextField value={state.rz_id} onChange={(e) => setState({ ...state, rz_id: e.target.value })} label='Rz ID' fullWidth size=\"small\" />\r\n                        </Stack>\r\n\r\n\r\n                        <Box mt={4} mb={4}>\r\n                            <Divider />\r\n                        </Box>\r\n\r\n                        <Stack direction={'row'} spacing={2} justifyContent={'space-between'} alignItems='center'>\r\n                            <Typography>Paypal</Typography>\r\n                            <Switch checked={state.paypal_is_active} onChange={() => {\r\n                                setState({ ...state, paypal_is_active: state.paypal_is_active == 0 ? 1 : 0 })\r\n                            }} />\r\n                        </Stack>\r\n                        <Stack mt={2} direction={'column'} spacing={2}>\r\n                            <TextField value={state.paypal_client_id} onChange={(e) => setState({ ...state, paypal_client_id: e.target.value })} label='Paypal ClientID' fullWidth size=\"small\" />\r\n                            <TextField value={state.paypal_client_secret} onChange={(e) => setState({ ...state, paypal_client_secret: e.target.value })} label='Paypal Client Secret' fullWidth size=\"small\" />\r\n                        </Stack>\r\n\r\n                        <Box mt={4} mb={4}>\r\n                            <Divider />\r\n                        </Box>\r\n\r\n                        <Stack direction={'row'} spacing={2} justifyContent={'space-between'} alignItems='center'>\r\n                            <Typography>Offline Payment</Typography>\r\n                            <Switch checked={state.offline_is_active} onChange={() => setState({ ...state, offline_is_active: state.offline_is_active == 0 ? 1 : 0 })} />\r\n                        </Stack>\r\n                        <TextField value={state.offline_msg} onChange={(e) => setState({ ...state, offline_msg: e.target.value })} sx={{ mt: 2 }} label='This will appear to user' multiline rows={4} fullWidth size=\"small\" />\r\n                    </>\r\n                ) : (\r\n                    <LinearProgress />\r\n                )\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ManagePayGateway","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\profile\\ProfileSet.js",["463"],[],"import React from 'react'\r\nimport { Box, Stack, Typography, Divider, TextField, LinearProgress } from '@mui/material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst ProfileSet = () => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n    const history = useHistory()\r\n\r\n    function getEmail() {\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/user/get_admin_email`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            setState({ ...state, email: res.data.email })\r\n        })\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        getEmail()\r\n    }, [token])\r\n\r\n    function updateProfile() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/change_admin_pw`, state, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            alert(res.data.msg)\r\n            if (res.data.success) {\r\n                localStorage.removeItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n                history.push('/admin')\r\n            }\r\n            setState({ ...state, loading: false })\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <Box p={2} >\r\n            <Box>\r\n                <Stack justifyContent={'space-between'} alignItems='center' direction={'row'} spacing={2}>\r\n                    <Typography fontWeight={'bold'} >Admin Profile</Typography>\r\n                </Stack>\r\n            </Box>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n\r\n            {\r\n                state.email ? (\r\n                    <Stack direction={'column'} spacing={2}>\r\n                        <TextField onChange={(e) => setState({ ...state, email: e.target.value })} value={state.email} label=\"Email\" fullWidth size='small' />\r\n                        <TextField onChange={(e) => setState({ ...state, new_password: e.target.value })} label=\"Password\" helperText=\"Leave it blank if you dont wanna change it\" fullWidth size='small' />\r\n                        <LoadingButton loading={state.loading} onClick={updateProfile} size='small' fullWidth variant='contained' >Update</LoadingButton>\r\n                    </Stack>\r\n                ) : <LinearProgress />\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ProfileSet","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\UserDash.js",["464"],[],"import React from 'react'\r\nimport { Stack, Typography, Box, Grid, LinearProgress } from '@mui/material'\r\nimport { Campaign, SmartToy, Paid, Cake } from '@mui/icons-material'\r\nimport axios from 'axios'\r\nimport GetUserByToken from '../../utils/GetUserByToken'\r\nimport moment from 'moment'\r\n\r\nconst UserDash = () => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const { user_by_token } = GetUserByToken()\r\n\r\n    function getDash() {\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/user/get_user_dashboard`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            setState({ data: res.data })\r\n        })\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        getDash()\r\n    }, [token])\r\n\r\n    return (\r\n        <Box p={2} >\r\n            {\r\n                state.data && user_by_token ? (\r\n                    <Grid container spacing={2}>\r\n                        <Grid xs={12} sm={6} lg={6} item>\r\n                            <Box bgcolor='black' borderRadius={3} p={2} >\r\n                                <Stack direction='row' spacing={2} justifyContent='space-between'>\r\n                                    <Box>\r\n                                        <Typography>\r\n                                            Total Campaign\r\n                                        </Typography>\r\n                                        <Typography variant='caption' color='gray' >\r\n                                            {state.data.campaign}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <Campaign />\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={12} sm={6} lg={6} item>\r\n                            <Box bgcolor='black' borderRadius={3} p={2} >\r\n                                <Stack direction='row' spacing={2} justifyContent='space-between'>\r\n                                    <Box>\r\n                                        <Typography>\r\n                                            Is Bot Running\r\n                                        </Typography>\r\n                                        <Typography variant='caption' color='gray' >\r\n                                            {state.data.bot_campaign ? \"🟢\" : \"🔴\"}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <SmartToy />\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={12} sm={6} lg={6} item>\r\n                            <Box bgcolor='black' borderRadius={3} p={2} >\r\n                                <Stack direction='row' spacing={2} justifyContent='space-between'>\r\n                                    <Box>\r\n                                        <Typography>\r\n                                            Plan\r\n                                        </Typography>\r\n                                        <Typography variant='caption' color='gray' >\r\n                                            {user_by_token.plan ? JSON.parse(user_by_token.plan).name + \": \" + user_by_token.left_msg + \" msgs left\" : \"NA\"}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <Paid />\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid xs={12} sm={6} lg={6} item>\r\n                            <Box bgcolor='black' borderRadius={3} p={2} >\r\n                                <Stack direction='row' spacing={2} justifyContent='space-between'>\r\n                                    <Box>\r\n                                        <Typography>\r\n                                            Joined Date\r\n                                        </Typography>\r\n                                        <Typography variant='caption' color='gray' >\r\n                                            {moment(user_by_token.created_at).format(\"DD-MMMM-YYYY\")}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <Cake />\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                ) : <LinearProgress />\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default UserDash","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bot\\WhatsAppBot.js",["465","466"],[],"import React from 'react'\r\nimport { BotProvider } from '../../../context/BotContext'\r\nimport { Box, Typography, Stack, Divider } from '@mui/material'\r\nimport { AddReply } from './components/AddReply'\r\nimport InitialScreen from './components/InitialScreen'\r\n\r\nconst WhatsAppBot = () => {\r\n\r\n    return (\r\n        <BotProvider>\r\n            <Box p={2}>\r\n                <Typography fontWeight={'bold'} >WhatsApp Bot</Typography>\r\n                <Typography color='gray' variant='caption' >Add a custom reply of your added messages.</Typography>\r\n\r\n\r\n                <Box mt={2} mb={2}>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                <InitialScreen />\r\n\r\n            </Box>\r\n        </BotProvider>\r\n    )\r\n}\r\n\r\nexport default WhatsAppBot","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\opt-plan\\OptPlan.js",["467","468"],[],"import { Box, Stack, Typography, Divider, ImageList, Button, Dialog, IconButton, LinearProgress, CircularProgress } from '@mui/material'\r\nimport React from 'react'\r\nimport axios from 'axios'\r\nimport { Close, WhatsApp } from '@mui/icons-material'\r\nimport DialogPlan from './DialogPlan'\r\nimport GetUserByToken from '../../../utils/GetUserByToken'\r\nimport GetWebSet from '../../../utils/GetWebSet'\r\n\r\nconst OptPlan = () => {\r\n    const [state, setState] = React.useState({\r\n        dialog: false\r\n    })\r\n    const { user_by_token } = GetUserByToken()\r\n    const { web_set } = GetWebSet()\r\n\r\n    function getPlans() {\r\n        setState({ ...state, loading: true })\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/plan/get`)\r\n            .then((res) => {\r\n                setState({ ...state, loading: false, plans: res.data.data })\r\n            })\r\n            .catch((er) => console.log(er))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getPlans()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <Box p={2} >\r\n            <Stack direction={'row'} alignItems='center'>\r\n                <Typography fontWeight=\"bold\" >Manage plan</Typography>\r\n            </Stack>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n\r\n\r\n            <Dialog fullScreen open={state.dialog} onClose={() => setState({ ...state, dialog: false })}>\r\n                <Box p={2} minHeight={'100vh'} bgcolor={'black'}>\r\n                    <Stack direction={'row'}>\r\n                        <IconButton onClick={() => setState({ ...state, dialog: false })} >\r\n                            <Close />\r\n                        </IconButton>\r\n                    </Stack>\r\n                    <DialogPlan plan={state.plan} web_set={web_set} />\r\n                </Box>\r\n            </Dialog>\r\n\r\n            <ImageList\r\n                sx={{\r\n                    gridAutoFlow: \"column\",\r\n                    gridTemplateColumns: \"repeat(auto-fill,minmax(160px,1fr)) !important\",\r\n                    gridAutoColumns: \"minmax(160px, 1fr)\",\r\n                    msOverflowStyle: 'none',\r\n                    overflowX: 'scroll',\r\n                    '::-webkit-scrollbar': {\r\n                        width: '10px'\r\n                    },\r\n                    '::-webkit-scrollbar-track': {\r\n                        background: '#4F4F4F',\r\n                        borderRadius: 10\r\n                    },\r\n                    '::-webkit-scrollbar-thumb': {\r\n                        background: \"#1B1B1B\",\r\n                        borderRadius: 10\r\n                    },\r\n                    '::-webkit-scrollbar-thumb:hover': {\r\n                        background: 'green',\r\n                    }\r\n                }}\r\n            >\r\n                {\r\n                    state.plans ? (\r\n                        <Stack mb={2} spacing={4} direction={'row'}>\r\n\r\n                            {\r\n                                state.plans?.map((i, key) => {\r\n                                    return (\r\n                                        <Box onClick={() => setState({ ...state, dialog: true, plan: i })} component={Button} key={key} minWidth={300} borderRadius={3} style={{\r\n                                            background: \"linear-gradient(to top right, #000000 74%, green 116%)\"\r\n                                        }} p={2}>\r\n                                            <Stack direction={'row'} justifyContent='space-between' spacing={4}>\r\n                                                <Stack alignItems={'flex-start'} direction={'column'}>\r\n                                                    <Typography color='white' fontWeight={'bold'} >{i.name}</Typography>\r\n                                                    <Typography style={{ textTransform: 'none', }} color='gray' variant='caption' >Messages Limit: {i.message_limit}</Typography>\r\n                                                    <Typography style={{ textTransform: 'none', }} color='gray' variant='caption' >Cost: {i.cost} {web_set?.currency_symbol}</Typography>\r\n                                                </Stack>\r\n                                                <WhatsApp sx={{ color: '#25D366', height: 100, width: 100 }} />\r\n                                            </Stack>\r\n                                        </Box>\r\n                                    )\r\n                                })\r\n                            }\r\n\r\n                        </Stack>\r\n                    ) : <Box mt={2} mb={2}>\r\n                        <CircularProgress />\r\n                    </Box>\r\n                }\r\n            </ImageList>\r\n\r\n\r\n            {user_by_token.plan && web_set &&\r\n                <Box mt={2} borderRadius={3} style={{\r\n                    background: \"linear-gradient(to top right, #000000 74%, gray 116%)\"\r\n                }} p={2}>\r\n                    <Stack direction={'row'} justifyContent='space-between' spacing={4}>\r\n                        <WhatsApp sx={{ color: '#25D366', height: 100, width: 100 }} />\r\n                        <Stack alignItems={'flex-start'} direction={'column'}>\r\n                            <Typography color='orange' fontWeight={'bold'} >You Plan:-</Typography>\r\n                            <Typography color='gray' fontWeight={'bold'} >{JSON.parse(user_by_token.plan).name}</Typography>\r\n                            <Typography style={{ textTransform: 'none', }} color='gray' variant='caption' >Messages Left: {new Intl.NumberFormat('en-US').format(user_by_token.left_msg)}</Typography>\r\n                            <Typography style={{ textTransform: 'none', }} color='gray' variant='caption' >Cost: {JSON.parse(user_by_token.plan).cost} {web_set.currency_symbol}</Typography>\r\n                        </Stack>\r\n                    </Stack>\r\n                </Box>\r\n            }\r\n\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default OptPlan","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\BulkMsg.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\msg-history\\MsgHistory.js",["469"],[],"import { Delete } from '@mui/icons-material'\r\nimport { Box, Divider, Typography, Stack, IconButton, LinearProgress } from '@mui/material'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport React from 'react'\r\n\r\nconst MsgHistory = () => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n\r\n    function getCam() {\r\n        setState({ ...state, loading: true })\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/user/get_campaign`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                alert(res.data.msg)\r\n            }\r\n            setState({ ...state, campaign: res.data.data, loading: false })\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        getCam()\r\n    }, [token])\r\n\r\n    function delCam(e) {\r\n        if (window.confirm(\"Are your sure?\")) {\r\n            setState({ ...state, loading: true })\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/delete_campaign`, {\r\n                id: e\r\n            }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                alert(res.data.msg)\r\n                getCam()\r\n                setState({ ...state, loading: false })\r\n            }).catch((err) => console.log(err))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box p={2} >\r\n            <Stack direction={'row'} alignItems='center'>\r\n                <Typography fontWeight=\"bold\" >Campaign History</Typography>\r\n            </Stack>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n\r\n            {\r\n                state.loading ? (\r\n                    <LinearProgress />\r\n                ) : (\r\n                    state.campaign?.length > 0 ? (\r\n                        <Stack direction={'column'} spacing={2}>\r\n                            {\r\n                                state.campaign?.map((i, key) => {\r\n                                    return (\r\n                                        <Box key={key} bgcolor={'black'} p={2} borderRadius={2}>\r\n                                            <Stack direction={'row'} justifyContent='space-between' spacing={2} alignItems='center'>\r\n                                                <Stack direction={'column'}>\r\n                                                    <Typography>{moment(i.created_at).fromNow()}</Typography>\r\n                                                    <Typography color='gray' variant='caption'>Total: {i.total_msg}, Sent: {i.sent_msg}</Typography>\r\n                                                </Stack>\r\n                                                <IconButton onClick={() => delCam(i.id)} color='error' >\r\n                                                    <Delete />\r\n                                                </IconButton>\r\n                                            </Stack>\r\n                                        </Box>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Stack>\r\n                    ) : <Typography variant='caption' color='gray'>No Plan found</Typography>\r\n                )\r\n            }\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default MsgHistory","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\instances\\Instance.js",["470","471","472","473","474"],[],"import { Add, Delete, Surfing } from '@mui/icons-material'\r\nimport { Box, Button, CircularProgress, Dialog, IconButton, Stack, Typography } from '@mui/material'\r\nimport React from 'react'\r\nimport axios from 'axios'\r\nimport qrcode from 'qrcode'\r\nimport moment from 'moment'\r\nimport { LoadingButton } from '@mui/lab'\r\n\r\nconst Instance = () => {\r\n    const [state, setState] = React.useState({\r\n        dialog_qr: false\r\n    })\r\n    const random = Date.now()\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const [qr, setQR] = React.useState(\"\")\r\n    const [qrLoad, setQrLoad] = React.useState(false)\r\n\r\n    const [ins, setIns] = React.useState([])\r\n\r\n    function getList() {\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/instance/get_all_token`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (res.data.success) {\r\n                setIns(res.data.data)\r\n            } else alert(res.data.msg || \"something went wrong\")\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) return\r\n        getList()\r\n    }, [token])\r\n\r\n\r\n    function qrtoBase64(qr) {\r\n        // console.log({ rec_in_qr: qr })\r\n        qrcode.toDataURL(qr, (err, src) => {\r\n            var base64Data = src.replace(/^data:image\\/png;base64,/, \"\")\r\n            setQR(base64Data)\r\n        });\r\n    }\r\n\r\n    function getQRFromDb() {\r\n        const timer = setInterval(async () => {\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/instance/get_one`, { client_id: random }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                console.log(res.data.data)\r\n                qrtoBase64(res.data.data.qr)\r\n                if (res.data.data.status === 'ready') {\r\n                    alert(\"Login Success\")\r\n                    setState({ ...state, dialog_qr: false })\r\n                    getList()\r\n                    // botState.setData({ ...botState.data, running_bot: true, bot_data: botState.data.reply })\r\n                    clearInterval(timer)\r\n                }\r\n            }).catch(((err) => console.log(err)))\r\n        }, 3000)\r\n    }\r\n\r\n\r\n    function addQR() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/instance/add`, {\r\n            client_id: random\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                alert(res.data.msg)\r\n                setState({ ...state, loading: false })\r\n                return\r\n            }\r\n            setState({ ...state, loading: false, dialog_qr: true })\r\n            getQRFromDb()\r\n        }).catch((er) => console.log(er))\r\n    }\r\n\r\n\r\n    function delIns(e) {\r\n        if (window.confirm(\"Are you sure?\")) {\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/instance/del`, {\r\n                id: e\r\n            }, { headers: { Authorization: \"Bearer \" + token } })\r\n                .then((res) => {\r\n                    alert(res.data.msg)\r\n                    getList()\r\n                }).catch((err) => console.log(err))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box p={2}>\r\n\r\n            <Dialog open={state.dialog_qr} onClose={() => setState({ ...state, dialog_qr: false })}>\r\n                {\r\n                    state.loading || qrLoad ? (\r\n                        <CircularProgress />\r\n                    ) : (\r\n                        qr ? <img src={`data:image/png;base64,${qr}`} /> : <Stack alignItems={'center'}> <CircularProgress /></Stack>\r\n                    )\r\n                }\r\n            </Dialog>\r\n\r\n\r\n            <Box p={2} borderRadius={2} bgcolor={'action.hover'}>\r\n                <Stack direction={'row'} justifyContent={'space-between'} alignItems={'center'}>\r\n                    <Typography fontWeight={'bold'} variant='h5' >Instances</Typography>\r\n                    <LoadingButton\r\n                        loading={state.loading}\r\n                        onClick={addQR}\r\n                        variant='contained' sx={{ borderRadius: 2 }} size='small' startIcon={<Add />} >Add Instance</LoadingButton>\r\n                </Stack>\r\n            </Box>\r\n\r\n            <Box mt={4}>\r\n                <Stack direction={'column'} spacing={2}>\r\n                    {ins && ins.map((i, key) => {\r\n                        return (\r\n                            <Box key={key} p={2} borderRadius={2} bgcolor={'white'}>\r\n                                <Stack direction={'row'} alignItems={'center'} justifyContent={'space-between'}>\r\n                                    <Stack direction={'column'}>\r\n                                        <Typography color={'black'} >+{i.mobile}</Typography>\r\n                                        <Typography variant='caption' color={'gray'} >{i.status}</Typography>\r\n                                    </Stack>\r\n\r\n                                    <Stack alignItems={'center'} direction={'row'} spacing={2}>\r\n                                        <Typography variant='caption' color={'gray'} >{moment(i.createdAt).format(\"DD/MM/YY hh:mm:A\")}</Typography>\r\n                                        <IconButton onClick={() => delIns(i.id)}  >\r\n                                            <Delete color='error' />\r\n                                        </IconButton>\r\n                                    </Stack>\r\n                                </Stack>\r\n                            </Box>\r\n                        )\r\n                    })}\r\n                </Stack>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Instance","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\profile\\UpdateProfile.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\check-logs\\CheckLogs.js",["475"],[],"import { Box, Grid, Typography, LinearProgress, IconButton } from '@mui/material'\r\nimport React from 'react'\r\nimport { DataGrid, GridToolbarContainer, GridToolbarExport } from '@mui/x-data-grid';\r\nimport { Delete } from '@mui/icons-material';\r\nimport axios from 'axios'\r\n\r\nfunction CustomToolbar() {\r\n    return (\r\n        <GridToolbarContainer>\r\n            <Box p={2} width={'100%'}  >\r\n                <Grid container justifyContent={'space-between'} spacing={2}>\r\n                    <Grid item>\r\n                        <Typography variant='h5' >All Users</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <GridToolbarExport />\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </GridToolbarContainer>\r\n    );\r\n}\r\n\r\nconst CheckLogs = () => {\r\n    const [report, setLogs] = React.useState(\"\")\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n\r\n    async function fetchData() {\r\n        const res = await axios.get(`${process.env.REACT_APP_BASE_URL}/api/instance/get_logs`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        })\r\n        setLogs(res.data.data)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) return\r\n        fetchData()\r\n    }, [token])\r\n\r\n    function delLog(e) {\r\n        if (window.confirm('Are your sure ?')) {\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/instance/del_log`, {\r\n                id: e\r\n            }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                alert(res.data.msg)\r\n                fetchData()\r\n            }).catch((er) => console.log(er))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box p={2}>\r\n            <Typography fontWeight={'bold'} variant='h6' >Report Single Message</Typography>\r\n            <Box mt={4}>\r\n                {\r\n                    report ? (\r\n                        <Box height='80vh'>\r\n                            <DataGrid\r\n                                getRowId={(row) => row.id}\r\n                                rows={[...report].reverse()}\r\n                                columns={[\r\n                                    { headerName: \"ID\", field: 'id', flex: 1, },\r\n                                    { headerName: \"Device\", field: 'sender', flex: 1, },\r\n                                    { headerName: \"Receiver\", field: 'receiver', flex: 1, },\r\n                                    { headerName: \"Status\", field: 'status', flex: 1, },\r\n                                    {\r\n                                        headerName: \"Delete\", field: 'del', flex: 1, renderCell: data => {\r\n                                            return (\r\n                                                <IconButton onClick={() => delLog(data.row.id)} color='error' >\r\n                                                    <Delete />\r\n                                                </IconButton>\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                ]}\r\n                                pageSize={50}\r\n                                rowsPerPageOptions={[50]}\r\n                                checkboxSelection={false}\r\n                                components={{\r\n                                    Toolbar: CustomToolbar,\r\n                                }}\r\n                            />\r\n                        </Box>\r\n                    ) : <LinearProgress />\r\n                }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CheckLogs","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\ping\\PingToAdmin.js",["476","477"],[],"import React from 'react'\r\nimport { Box, LinearProgress, Stack, TextField, Container, IconButton, Divider, CircularProgress, Accordion, AccordionSummary, AccordionDetails, Typography } from '@mui/material'\r\nimport { DoneAll, Send, Done, ExpandMore } from '@mui/icons-material'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\n\r\n\r\nconst PingToAdmin = () => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n\r\n    function sendMsg() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/ping/add`, {\r\n            message: state.message\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            setState({ ...state, loading: false })\r\n            alert(res.data.msg)\r\n            getMsg()\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    function getMsg() {\r\n        setState({ ...state, loading: true })\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/ping/my_message`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                alert(res.data.msg)\r\n            }\r\n            setState({ ...state, all_messages: res.data.data, loading: false, message: \"\" })\r\n        })\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        getMsg()\r\n    }, [token])\r\n\r\n    return (\r\n        <Box p={2}>\r\n            <Stack direction={'row'} alignItems='center'>\r\n                <Typography fontWeight=\"bold\" >Ping to Admin</Typography>\r\n            </Stack>\r\n            <Box mt={2} mb={2}>\r\n                <Divider />\r\n            </Box>\r\n            <Box mt={4} >\r\n                <Stack alignItems={'flex-start'} direction={'column'} spacing={2}>\r\n                    <TextField value={state.message} onChange={(e) => setState({ ...state, message: e.target.value })} label=\"Type your message here\" size='small' fullWidth rows={4} multiline />\r\n                    {\r\n                        state.loading ? (\r\n                            <CircularProgress />\r\n                        ) : (\r\n                            <IconButton onClick={sendMsg} disabled={state.message ? false : true} >\r\n                                <Send />\r\n                            </IconButton>\r\n                        )\r\n                    }\r\n                </Stack>\r\n\r\n                <Box mt={2} mb={2}>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                <Stack direction={'column'} spacing={2}>\r\n                    {\r\n                        state.all_messages ? [...state.all_messages].reverse().map((item, key) => {\r\n                            return (\r\n                                <Accordion key={key} >\r\n                                    <AccordionSummary\r\n                                        sx={{ bgcolor: item.admin_response ? \"green\" : null, borderRadius: 2 }}\r\n                                        expandIcon={<ExpandMore />}\r\n                                        aria-controls=\"panel1a-content\"\r\n                                        id=\"panel1a-header\"\r\n                                    >\r\n                                        <Typography variant='caption' >{key + 1}) {item.message} {item.admin_response ? <DoneAll sx={{ color: 'lightgreen', height: 15, width: 15 }} /> : <Done sx={{ color: 'lightgreen', height: 15, width: 15 }} />}</Typography>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails>\r\n                                        <Typography>\r\n                                            <Typography sx={{ mb: 2 }} fontSize={12} color='gray' >{\r\n                                                item.admin_response ? (\r\n                                                    item.admin_response\r\n                                                ) : \"Awaiting to respond\"\r\n                                            }</Typography>\r\n                                            <Divider />\r\n                                            <Typography sx={{ mt: 2 }} align='right' fontSize={12} color='gray' >Sent on: {moment(item.createdAt).format('DD-MMMM-YYYY')}</Typography>\r\n                                        </Typography>\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            )\r\n                        }) : <LinearProgress />\r\n                    }\r\n                </Stack>\r\n            </Box>\r\n\r\n        </Box >\r\n    )\r\n}\r\n\r\nexport default PingToAdmin","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\send-messages\\SendMessage.js",["478"],[],"import { Box, Stack } from '@mui/material'\r\nimport React from 'react'\r\nimport SendSingle from './components/SendSingle'\r\nimport SendMedia from './components/SendMedia'\r\n\r\nconst SendMessage = () => {\r\n    return (\r\n        <Box bgcolor={'black'} p={4}>\r\n            <Stack direction={'column'} spacing={3}>\r\n                {/* <SendSingle /> */}\r\n                <SendMedia />\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SendMessage","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetAllUserAdmin.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetPlans.js",["479"],[],"import React from 'react'\r\nimport axios from 'axios'\r\nimport { GlobalContext } from '../context/GlobalContext'\r\n\r\nconst GetPlans = () => {\r\n    const [plan_data, setState] = React.useState(\"\")\r\n    const globalContext = React.useContext(GlobalContext)\r\n    async function fetchPlans() {\r\n        const res = await axios.get(`${process.env.REACT_APP_BASE_URL}/api/plan/get`)\r\n        globalContext.setData({ ...globalContext.data, plan_data: res.data.data })\r\n        if (!res.data.success) {\r\n            console.log(res.data)\r\n        }\r\n        setState(res.data.data)\r\n    }\r\n    React.useEffect(() => {\r\n        fetchPlans()\r\n    }, [])\r\n    return { plan_data }\r\n}\r\n\r\nexport default GetPlans","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\manage-plans\\AddPlan.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetTokenAdmin.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\admin\\pages\\manage-users\\components\\EditUser.js",["480","481"],[],"import { Accordion, Button, AccordionDetails, AccordionSummary, Switch, TextField, Typography } from '@mui/material'\r\nimport { Box, Container, Stack } from '@mui/system'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport React from 'react'\r\nimport axios from 'axios'\r\nimport { AdminContext } from '../../../../context/AdminContext'\r\nimport { ExpandMore, Refresh, SmartToy } from '@mui/icons-material'\r\nimport GetPlans from '../../../../utils/GetPlans'\r\n\r\nconst EditUser = ({ user }) => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_admin\")\r\n    const adminContext = React.useContext(AdminContext)\r\n    const { plan_data } = GetPlans()\r\n    const [bot, setBot] = React.useState(\"\")\r\n    const [deleted, setDeleted] = React.useState(false)\r\n\r\n    React.useEffect(() => {\r\n        if (!token || !user) {\r\n            return\r\n        }\r\n        getBot()\r\n        setState({ ...user })\r\n    }, [user, token])\r\n\r\n    function getUsers() {\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/admin/get_all_user`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            adminContext.setData({ ...adminContext.data, all_users: res.data.data })\r\n            setState({ ...state, loading: false })\r\n        })\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n    function updateUser() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/admin_user_update`, state, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            getUsers()\r\n            alert(res.data.msg)\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    function updatePlan() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/admin_plan_update`, {\r\n            plan: state.plan,\r\n            uid: user.uid\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            alert(res.data.msg)\r\n            setState({ ...state, loading: false })\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    function getBot() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/get_bot_from_admin`, {\r\n            uid: user.uid\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            setBot(res.data.data)\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    function killBot() {\r\n        if (window.confirm(\"Make sure bot session is logged out from WhstsApp mobile App.\\nElse close this bot by logging out the bot session from WhstApp App\")) {\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/kill_bot_by_admin`, {\r\n                uid: user.uid\r\n            }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                alert(res.data.msg)\r\n                if (res.data.success) {\r\n                    setBot(\"\")\r\n                }\r\n            }).catch((err) => console.log(err))\r\n        }\r\n    }\r\n\r\n    function deleteUser(e) {\r\n        if (window.confirm(\"Are your sure\")) {\r\n            setState({ ...state, loading: true })\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/delete_user`, {\r\n                uid: e\r\n            }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                if (res.data.success) {\r\n                    setDeleted(true)\r\n                }\r\n                alert(res.data.msg)\r\n                setState({ ...state, loading: false })\r\n                getUsers()\r\n            }).catch((err) => console.log(err))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box minHeight={'100vh'} bgcolor={'black'}>\r\n            <Container maxWidth='lg'>\r\n                <Box mt={2}>\r\n                    {\r\n                        deleted ? (\r\n                            <Typography>This user has been deleted</Typography>\r\n                        ) : (\r\n                            <Stack direction={'column'} spacing={2}>\r\n                                <TextField onChange={(e) => setState({ ...state, name: e.target.value })} size='small' value={state.name} label=\"Name\" fullWidth />\r\n                                <TextField onChange={(e) => setState({ ...state, email: e.target.value })} size='small' value={state.email} label=\"Email\" fullWidth />\r\n                                <TextField onChange={(e) => setState({ ...state, mobile: e.target.value })} size='small' value={state.mobile} label=\"Mobile\" fullWidth />\r\n                                <TextField onChange={(e) => setState({ ...state, new_password: e.target.value })} helperText=\"Leave it blank password you don't want to change it\" size='small' label=\"Password\" fullWidth />\r\n                                <Stack alignItems={'center'} direction={'row'} justifyContent='space-between'>\r\n                                    <LoadingButton loading={state.loading} onClick={() => deleteUser(user.uid)} fullWidth variant='outlined' color='error'>\r\n                                        Delete User\r\n                                    </LoadingButton>\r\n                                </Stack>\r\n\r\n                                <Accordion>\r\n                                    <AccordionSummary\r\n                                        expandIcon={<ExpandMore />} >\r\n                                        <Typography>Update Plan</Typography>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails>\r\n                                        <Stack alignItems={'center'} direction={'row'} spacing={2}>\r\n                                            {\r\n                                                plan_data && plan_data.map((i, key) => {\r\n                                                    return (\r\n                                                        <Box onClick={() => {\r\n                                                            setState({ ...state, plan: JSON.stringify(i) })\r\n                                                        }} sx={{ textTransform: 'none' }} component={Button} key={key} border={1}\r\n                                                            borderColor={\r\n                                                                state.plan && JSON.parse(state.plan).id === i.id ? \"orange\" : \"white\"\r\n                                                            }\r\n                                                            bgcolor={'#262626'} p={2} borderRadius={2}>\r\n                                                            <Stack direction={'column'} spacing={1}>\r\n                                                                <Typography align='center' color={state.plan && JSON.parse(state.plan).id === i.id ? \"orange\" : \"white\"} variant='body2' fontWeight='bold'>\r\n                                                                    {i.name}\r\n                                                                </Typography>\r\n                                                                <Typography align='center' color={'gray'} variant='body2' >\r\n                                                                    {i.message_limit} msgs.\r\n                                                                </Typography>\r\n                                                                <Typography align='center' color={'gray'} fontSize={12} >\r\n                                                                    {i.cost} msgs.\r\n                                                                </Typography>\r\n                                                            </Stack>\r\n                                                        </Box>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Stack>\r\n\r\n                                        <Stack alignItems={'center'} direction='row' justifyContent={'space-between'} mt={2}>\r\n                                            <Typography variant='body2' color='gray' >{state.left_msg > 0 ? state.left_msg + \" msg left\" : null}</Typography>\r\n                                            <LoadingButton loading={state.loading} onClick={updatePlan} startIcon={<Refresh />} variant='outlined' >Update Plan</LoadingButton>\r\n                                        </Stack>\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n\r\n                                {\r\n                                    bot &&\r\n                                    <Box border={1} bgcolor={'#161616'} p={2} borderRadius={2} >\r\n                                        <Stack alignItems={'center'} direction={'row'} justifyContent='space-between'>\r\n                                            <Typography color='white' >WhatsApp Bot is running...</Typography>\r\n                                            <Button startIcon={<SmartToy />} onClick={killBot} size='small' color='error' variant='outlined'  >Kill Bot</Button>\r\n                                        </Stack>\r\n                                    </Box>\r\n                                }\r\n\r\n                                <LoadingButton onClick={updateUser} loading={state.loading} variant='contained' >Update</LoadingButton>\r\n                            </Stack>\r\n                        )\r\n                    }\r\n                </Box>\r\n            </Container >\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default EditUser","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\common\\DialogHeader.js",["482"],[],"import { AppBar, IconButton, Typography, Toolbar } from '@mui/material'\r\n\r\nexport default function DialogHeader(props) {\r\n    return (\r\n        <AppBar sx={{ position: 'relative' }}>\r\n            <Toolbar>\r\n                {props.closebtn}\r\n                <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\">\r\n                    {props.title}\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\context\\BotContext.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\context\\SendBulkContext.js",["483","484"],[],"import React from 'react'\r\nimport moment from 'moment'\r\n\r\nexport const SendBulkContext = React.createContext(null)\r\n\r\nfunction addMinutes(date, minutes) {\r\n    return new Date(date.getTime() + minutes * 60000);\r\n}\r\n\r\nvar twentyMinutesLater = new Date();\r\n\r\nexport const SendBulkProvider = (props) => {\r\n    const [data, setData] = React.useState({\r\n        step: 0,\r\n        chip_color: 'primary',\r\n        with_media: false,\r\n        time: moment().add(10, 'minutes'),\r\n        // addType: 'excel',\r\n        // sending_msg: \"\",\r\n        // excel_array: [],\r\n        schedule: false,\r\n        paste_media: false,\r\n        delay_in_sec: 10,\r\n    })\r\n    return (\r\n        <SendBulkContext.Provider value={{ data, setData }}>\r\n            {props.children}\r\n        </SendBulkContext.Provider>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\opt-plan\\DialogPlan.js",["485","486","487","488","489","490"],[],"import { AccountBalance } from '@mui/icons-material'\r\nimport { Box, Grid, Typography, Button, CircularProgress, Dialog } from '@mui/material'\r\nimport { Container, Stack } from '@mui/system'\r\nimport React from 'react'\r\nimport GetWebSet from '../../../utils/GetWebSet'\r\nimport { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst DialogPlan = ({ plan, web_set }) => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const history = useHistory()\r\n\r\n    const [orderDone, setOrderDone] = React.useState(false)\r\n\r\n    const loadScript = (src) => {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement('script')\r\n            script.src = src\r\n\r\n            script.onload = () => {\r\n                resolve(true)\r\n            }\r\n\r\n            script.onerror = () => {\r\n                resolve(false)\r\n            }\r\n            document.body.appendChild(script)\r\n        })\r\n    }\r\n\r\n    const payByRz = async (amt) => {\r\n        const resp = await loadScript('https://checkout.razorpay.com/v1/checkout.js')\r\n        console.log(resp)\r\n        if (!resp) {\r\n            alert('Internet problem!')\r\n            return\r\n        }\r\n        const finalamt = parseInt(plan.cost) / parseInt(web_set.exchange_rate) * 80\r\n\r\n        const options = {\r\n            key: web_set.rz_id,\r\n            currency: \"INR\",\r\n            amount: Math.round(finalamt) * 100,\r\n            name: web_set.app_name,\r\n            description: \"100% secured payment\",\r\n\r\n            handler: function (response) {\r\n                setState({ ...state, loading: true })\r\n                axios.post(`${process.env.REACT_APP_BASE_URL}/api/order/pay_with_rz`, {\r\n                    plan: plan,\r\n                    rz_payment_id: response.razorpay_payment_id,\r\n                    amount: plan.cost\r\n                }, {\r\n                    headers: {\r\n                        Authorization: \"Bearer \" + token\r\n                    }\r\n                }).then((res) => {\r\n                    if (res.data.success) {\r\n                        alert(\"Congo!\")\r\n                        history.push(\"/done-page\")\r\n                        setState({ ...state, loading: false })\r\n                        return\r\n                    }\r\n                    console.log(res.data)\r\n                    alert(res.data.msg)\r\n                })\r\n                    .catch((err) => console.log(err))\r\n            }\r\n\r\n        }\r\n\r\n        const paymentObject = new window.Razorpay(options)\r\n        paymentObject.open()\r\n\r\n    }\r\n\r\n    function paywithPaypal(order_id) {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/order/paypal_with_paypal`, {\r\n            order_id: order_id,\r\n            plan: plan,\r\n        }, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (res.data.success) {\r\n                alert(\"Congo!\")\r\n                history.push(\"/done-page\")\r\n                setState({ ...state, loading: false })\r\n                return\r\n            }\r\n            console.log(res.data)\r\n            alert(res.data.msg)\r\n        }).catch((err) => {\r\n            setState({ ...state, loading: false })\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <Box mt={2} >\r\n\r\n\r\n            <Dialog open={state.offline_dialog} onClose={() => setState({ ...state, offline_dialog: false })}>\r\n                <Box bgcolor=\"white\" borderColor={'white'} p={6}>\r\n                    <Stack direction='column' spacing={2} alignItems='center' >\r\n                        <Typography color='black' fontWeight={'bold'} variant='h5' >Offline Instructions</Typography>\r\n                        <Typography color='black'>{web_set && web_set.offline_msg}</Typography>\r\n                    </Stack>\r\n                </Box>\r\n            </Dialog>\r\n\r\n\r\n            <Container maxWidth='lg'>\r\n                <Grid container minHeight={'80vh'} alignItems='center' justifyContent={'center'}>\r\n                    {\r\n                        web_set ? (\r\n                            <Grid item>\r\n                                <Stack alignItems={'center'} direction={'column'} spacing={2}>\r\n\r\n                                    <Typography variant='h5' color='white' >Paying {plan?.cost} {web_set?.currency_symbol}</Typography>\r\n\r\n                                    <Typography>Choose your payment method to checkout securly to opt <a style={{ color: '#FFD700', fontWeight: 'bold' }} >{plan.name}</a> Plan</Typography>\r\n\r\n                                    <Stack alignItems={'flex-start'} direction={'row'} spacing={2}>\r\n                                        {\r\n                                            web_set.rz_is_is_active ?\r\n                                                <Box onClick={payByRz} style={{ cursor: 'pointer' }} bgcolor={'white'} borderRadius={1} p={1.5}>\r\n                                                    <Stack direction={'row'} spacing={2}>\r\n                                                        <img src=\"/static/rzp-glyph-positive.png\" style={{ height: 20 }} />\r\n                                                        <Typography sx={{ textTransform: 'none' }} color='black' >Razorpay</Typography>\r\n                                                    </Stack>\r\n                                                </Box> : null\r\n                                        }\r\n\r\n                                        {\r\n                                            web_set.paypal_is_active ?\r\n                                                <PayPalScriptProvider options={{ \"client-id\": web_set.paypal_client_id }} >\r\n                                                    <PayPalButtons\r\n                                                        createOrder={(data, actions) => {\r\n                                                            return actions.order.create({\r\n                                                                purchase_units: [{\r\n                                                                    description: plan.name,\r\n                                                                    amount: {\r\n                                                                        value: parseInt(plan.cost) / parseInt(web_set.exchange_rate)\r\n                                                                    }\r\n                                                                }]\r\n                                                            })\r\n                                                        }}\r\n                                                        onApprove={async (data, actions) => {\r\n                                                            const order = await actions.order.capture()\r\n                                                            paywithPaypal(order.id)\r\n                                                        }}\r\n                                                        onError={(err) => {\r\n                                                            console.log(\"err: \", err)\r\n                                                        }}\r\n                                                        onCancel={(cancel) => {\r\n                                                            alert('Ops.. Your order was canceled.\\nPlease contact support if you are feeling trouble.')\r\n                                                        }}\r\n                                                        onClick={(data, actions) => {\r\n\r\n                                                        }}\r\n                                                        style={{\r\n                                                            color: 'white',\r\n                                                            layout: 'horizontal',\r\n                                                            height: 48,\r\n                                                            tagline: false,\r\n                                                        }} />\r\n                                                </PayPalScriptProvider> : null\r\n                                        }\r\n\r\n                                        {\r\n                                            web_set.offline_is_active ?\r\n                                                <Box style={{ cursor: 'pointer' }} onClick={() => setState({ ...state, offline_dialog: true })} bgcolor={'white'} borderRadius={1} p={1.5}>\r\n                                                    <Stack direction={'row'} spacing={2}>\r\n                                                        <AccountBalance sx={{ color: 'gray' }} />\r\n                                                        <Typography sx={{ textTransform: 'none' }} color='black' >Offline Payment</Typography>\r\n                                                    </Stack>\r\n                                                </Box> : null\r\n                                        }\r\n                                    </Stack>\r\n\r\n                                </Stack>\r\n                            </Grid>\r\n                        ) : <CircularProgress />\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default DialogPlan","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bot\\components\\AddReply.js",["491","492"],[],"import { Delete, Reply } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport { Box, Stack, Button, Typography, Divider, Dialog, TextField, IconButton, CircularProgress } from '@mui/material'\r\nimport axios from 'axios'\r\nimport React from 'react'\r\nimport { BotContext } from '../../../../context/BotContext'\r\nimport qrcode from 'qrcode'\r\n\r\n\r\nexport const AddReply = () => {\r\n    const botState = React.useContext(BotContext)\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const [qr, setQR] = React.useState(\"\")\r\n    const [qrLoad, setQrLoad] = React.useState(false)\r\n\r\n    function qrtoBase64(qr) {\r\n        // console.log({ rec_in_qr: qr })\r\n        qrcode.toDataURL(qr, (err, src) => {\r\n            var base64Data = src.replace(/^data:image\\/png;base64,/, \"\")\r\n            setQR(base64Data)\r\n        });\r\n    }\r\n\r\n    function getQRFromDb() {\r\n        const timer = setInterval(async () => {\r\n            axios.get(`${process.env.REACT_APP_BASE_URL}/api/bot/get_one`, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                // console.log(res.data.data)\r\n                qrtoBase64(res.data.data.qr_code)\r\n                if (res.data.data.login_status) {\r\n                    alert(\"Login Success\")\r\n                    botState.setData({ ...botState.data, running_bot: true, bot_data: botState.data.reply })\r\n                    clearInterval(timer)\r\n                }\r\n            }).catch(((err) => console.log(err)))\r\n        }, 3000)\r\n    }\r\n\r\n\r\n    function addBot() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/bot/add_one`, botState.data, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                alert(res.data.msg)\r\n                setState({ ...state, loading: false })\r\n                return\r\n            }\r\n            setState({ ...state, loading: false, dialog_qr: true })\r\n            getQRFromDb()\r\n        })\r\n            .catch((er) => console.log(er))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Dialog open={state.dialog_qr} onClose={() => setState({ ...state, dialog_qr: false })}>\r\n                <Box p={2}>\r\n                    {\r\n                        state.loading || qrLoad ? (\r\n                            <CircularProgress />\r\n                        ) : (\r\n                            qr ? <img src={`data:image/png;base64,${qr}`} /> : <Stack alignItems={'center'}> <CircularProgress /></Stack>\r\n                        )\r\n                    }\r\n                    <Box mt={2}>\r\n                        <Typography align='center' >Scan this QR from your WhstaApp</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Dialog>\r\n\r\n\r\n            <Box onClick={() => setState({ ...state, dialog: true })} sx={{ textTransform: 'none' }} fullWidth component={Button} p={4} border={0.5} borderRadius={2}>\r\n                <Typography>Add a bot</Typography>\r\n            </Box>\r\n\r\n            <Dialog fullWidth open={state.dialog} onClose={() => setState({ ...state, dialog: false })}>\r\n                <Box p={2}>\r\n                    <Typography align='center' >Whats on your mind?</Typography>\r\n                    <Stack mt={3} direction={'column'} spacing={2}>\r\n                        <TextField multiline value={state.in} onChange={(e) => setState({ ...state, in: e.target.value })} label=\"Enter incoming message\" fullWidth size='small' />\r\n                        <TextField multiline value={state.out} onChange={(e) => setState({ ...state, out: e.target.value })} label=\"Enter outgoing message\" fullWidth size='small' />\r\n                        <Button\r\n                            disabled={state.in && state.out ? false : true}\r\n                            onClick={() => {\r\n                                if (botState.data.reply.length > 9) {\r\n                                    return alert(\"Max 10 bots are allowed\")\r\n                                }\r\n                                botState.setData({\r\n                                    ...botState, reply: [...botState.data.reply, {\r\n                                        id: Math.floor(Math.random() * 90000) + 10000,\r\n                                        in: state.in,\r\n                                        out: state.out\r\n                                    }]\r\n                                })\r\n                                setState({ ...state, in: \"\", out: \"\", dialog: false })\r\n                            }} size='small' variant='contained' >Add</Button>\r\n                    </Stack>\r\n                </Box>\r\n            </Dialog>\r\n\r\n            {\r\n                botState.data.reply.length > 0 &&\r\n                <>\r\n                    <Box mt={2} mb={2}>\r\n                        <Divider />\r\n                    </Box>\r\n\r\n                    <Stack direction={'column'} spacing={2}>\r\n                        {\r\n                            botState.data.reply.map((i, key) => {\r\n                                return (\r\n                                    <Box style={{ position: 'relative' }} key={key} borderRadius={4} p={2} bgcolor='black'>\r\n                                        <Stack alignItems={'flex-start'} >\r\n                                            <Box minWidth={60} mr={'40%'} bgcolor={'#3f50b5'} p={1} borderRadius={2}>\r\n                                                <Typography variant='caption' color='black' >{i.in}</Typography>\r\n                                            </Box>\r\n                                        </Stack>\r\n                                        <Stack mt={1} alignItems={'flex-end'} >\r\n                                            <Box ml={'40%'} bgcolor={'#262626'} p={1} borderRadius={2}>\r\n                                                <Box minWidth={60} bgcolor={'#273550'} p={1} borderRadius={2}>\r\n                                                    <Reply sx={{ color: 'gray', height: 20, width: 20 }} />\r\n                                                    <Typography fontSize={10} color='gray' >{i.in}</Typography>\r\n                                                </Box>\r\n                                                <Box minWidth={60} mr={1} mt={1} >\r\n                                                    <Typography variant='caption' color='gray' >{i.out}</Typography>\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </Stack>\r\n                                        <Box style={{ position: 'absolute', top: 0, bottom: 0, right: 0, textAlign: 'center' }}>\r\n                                            <IconButton onClick={() => {\r\n                                                const filteredReply = botState.data.reply.filter((item) => item.id !== i.id)\r\n                                                botState.setData({\r\n                                                    ...botState, reply: filteredReply\r\n                                                })\r\n                                            }} color='error' >\r\n                                                <Delete />\r\n                                            </IconButton>\r\n                                        </Box>\r\n                                    </Box >\r\n                                )\r\n                            })\r\n                        }\r\n                    </Stack>\r\n\r\n                    <Box mt={2}>\r\n                        <LoadingButton loading={state.loading} onClick={addBot} size='small' variant='contained' fullWidth >Scan QR</LoadingButton>\r\n                    </Box>\r\n\r\n                </>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bot\\components\\InitialScreen.js",["493"],[],"import { LinearProgress, Zoom, Box } from '@mui/material'\r\nimport axios from 'axios'\r\nimport React from 'react'\r\nimport { BotContext } from '../../../../context/BotContext'\r\nimport { AddReply } from './AddReply'\r\nimport RunningBot from './RunningBot'\r\n\r\nconst InitialScreen = () => {\r\n    const botState = React.useContext(BotContext)\r\n    const [state, setState] = React.useState({\r\n        loading: true\r\n    })\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n\r\n    function getBot() {\r\n        setState({ ...state, loading: true })\r\n        axios.get(`${process.env.REACT_APP_BASE_URL}/api/bot/get_one`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            setState({ ...state, loading: false })\r\n            if (res.data.success) {\r\n                if (res.data.data) {\r\n                    botState.setData({ ...botState.data, running_bot: true, bot_data: JSON.parse(res.data.data.reply) })\r\n                }\r\n            }\r\n        }).catch((err) => console.log(err))\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!token) {\r\n            return\r\n        }\r\n        getBot()\r\n    }, [token])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                state.loading ? (\r\n                    <LinearProgress />\r\n                ) : (\r\n                    botState.data.running_bot ? (\r\n                        <Zoom in={true} >\r\n                            <Box>\r\n                                <RunningBot />\r\n                            </Box>\r\n                        </Zoom>\r\n                    ) : (\r\n                        <Zoom in={true} >\r\n                            <Box>\r\n                                <AddReply />\r\n                            </Box>\r\n                        </Zoom>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InitialScreen","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\StepComp.js",["494","495"],[],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport { Button, Typography } from '@mui/material'\r\nimport Stack from '@mui/material/Stack';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport { ContentPasteGo, BorderColor, Send, HighlightAlt } from '@mui/icons-material'\r\nimport StepConnector, { stepConnectorClasses } from '@mui/material/StepConnector';\r\nimport { Box, IconButton } from '@mui/material';\r\nimport VisibleComp from './VisibleComp';\r\nimport { SendBulkContext } from '../../../../context/SendBulkContext';\r\n\r\n\r\nconst ColorlibConnector = styled(StepConnector)(({ theme }) => ({\r\n    [`&.${stepConnectorClasses.alternativeLabel}`]: {\r\n        top: 22,\r\n    },\r\n    [`&.${stepConnectorClasses.active}`]: {\r\n        [`& .${stepConnectorClasses.line}`]: {\r\n            backgroundImage:\r\n                'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\r\n        },\r\n    },\r\n    [`&.${stepConnectorClasses.completed}`]: {\r\n        [`& .${stepConnectorClasses.line}`]: {\r\n            backgroundImage:\r\n                'linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)',\r\n        },\r\n    },\r\n    [`& .${stepConnectorClasses.line}`]: {\r\n        height: 3,\r\n        border: 0,\r\n        backgroundColor:\r\n            theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',\r\n        borderRadius: 1,\r\n    },\r\n}));\r\n\r\nconst ColorlibStepIconRoot = styled('div')(({ theme, ownerState }) => ({\r\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[700] : '#ccc',\r\n    zIndex: 1,\r\n    color: '#fff',\r\n    width: 50,\r\n    height: 50,\r\n    display: 'flex',\r\n    borderRadius: '50%',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    ...(ownerState.active && {\r\n        backgroundImage:\r\n            'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\r\n        boxShadow: '0 4px 10px 0 rgba(0,0,0,.25)',\r\n    }),\r\n    ...(ownerState.completed && {\r\n        backgroundImage:\r\n            'linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)',\r\n    }),\r\n}));\r\n\r\nfunction ColorlibStepIcon(props) {\r\n    const { active, completed, className } = props;\r\n\r\n    const icons = {\r\n        1: <HighlightAlt />,\r\n        2: <ContentPasteGo />,\r\n        3: <BorderColor />,\r\n        4: <Send />,\r\n    };\r\n\r\n    return (\r\n        <ColorlibStepIconRoot ownerState={{ completed, active }} className={className}>\r\n            {icons[String(props.icon)]}\r\n        </ColorlibStepIconRoot>\r\n    );\r\n}\r\n\r\nColorlibStepIcon.propTypes = {\r\n    /**\r\n     * Whether this step is active.\r\n     * @default false\r\n     */\r\n    active: PropTypes.bool,\r\n    className: PropTypes.string,\r\n    /**\r\n     * Mark the step as completed. Is passed to child components.\r\n     * @default false\r\n     */\r\n    completed: PropTypes.bool,\r\n    /**\r\n     * The label displayed in the step icon.\r\n     */\r\n    icon: PropTypes.node,\r\n};\r\n\r\nconst steps = ['Type', 'Add numbers', 'Write your message', 'Send'];\r\n\r\nexport default function StepComp() {\r\n    const sendBulk = React.useContext(SendBulkContext)\r\n\r\n    return (\r\n        <Box>\r\n            <Stack sx={{ width: '100%' }} spacing={4}>\r\n                <Stepper alternativeLabel activeStep={sendBulk.data.step} connector={<ColorlibConnector />}>\r\n                    {steps.map((label, key) => (\r\n                        <Step sx={{ textTransform: 'none' }} key={label}>\r\n                            <StepLabel StepIconComponent={ColorlibStepIcon}>\r\n                                <Typography variant='caption'>\r\n                                    {label}\r\n                                </Typography>\r\n                            </StepLabel>\r\n                        </Step>\r\n                    ))}\r\n                </Stepper>\r\n            </Stack>\r\n\r\n            <Box borderRadius={2} p={2} bgcolor='#131313' mt={4}>\r\n                <VisibleComp />\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\send-messages\\components\\SendMedia.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\send-messages\\components\\SendSingle.js",["496"],[],"import { ExpandMore, Send } from '@mui/icons-material'\r\nimport { Accordion, AccordionActions, AccordionDetails, AccordionSummary, Box, Button, FormControl, InputLabel, LinearProgress, MenuItem, Select, Stack, TextField, Typography } from '@mui/material'\r\nimport React from 'react'\r\nimport GetInstance from '../../../../utils/GetInstance'\r\n\r\nconst SendSingle = () => {\r\n    const { instance } = GetInstance()\r\n    const [state, setState] = React.useState({\r\n\r\n    })\r\n    return (\r\n        <Accordion>\r\n            <AccordionSummary expandIcon={<ExpandMore />}>\r\n                <Typography variant='h6'>Send Text</Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n                <Box borderRadius={2} bgcolor={'black'} p={2} m={2}>\r\n                    <Stack direction={'column'} spacing={2}>\r\n                        <Typography variant='h6' fontWeight={'bold'} >Send Text Message</Typography>\r\n\r\n                        {instance ?\r\n                            <Box mt={2}>\r\n                                <Stack direction={'column'} spacing={2}>\r\n                                    <FormControl\r\n                                        size='small' fullWidth>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Select Instance</InputLabel>\r\n                                        <Select\r\n                                            sx={{ borderRadius: 3 }}\r\n                                            size='small'\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            id=\"demo-simple-select\"\r\n                                            // value={Select Instance}\r\n                                            label=\"Select Instance\"\r\n                                            onChange={(e) => setState({ ...state, client_id: e.target.value.client_id })}\r\n                                        >\r\n                                            {instance && instance.map((i, key) => {\r\n                                                return (\r\n                                                    <MenuItem key={key} value={10}>+{i.mobile}</MenuItem>\r\n                                                )\r\n                                            })}\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Stack>\r\n                            </Box> : <LinearProgress />}\r\n\r\n                        <TextField\r\n                            label=\"Enter contact number\"\r\n                            type='number'\r\n                            size='small'\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                                style: {\r\n                                    borderRadius: 14 // Customize the border radius as per your requirement\r\n                                },\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Enter your message\"\r\n                            rows={4}\r\n                            multiline={true}\r\n                            size='small'\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                                style: {\r\n                                    borderRadius: 14 // Customize the border radius as per your requirement\r\n                                },\r\n                            }}\r\n                        />\r\n\r\n                        <Stack alignItems={'flex-end'}>\r\n                            <Button\r\n                                startIcon={<Send />}\r\n                                sx={{ borderRadius: 2 }} variant='contained' >Send Message</Button>\r\n                        </Stack>\r\n\r\n                    </Stack>\r\n                </Box>\r\n            </AccordionDetails>\r\n        </Accordion>\r\n    )\r\n}\r\n\r\nexport default SendSingle","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bot\\components\\RunningBot.js",["497"],[],"import React from 'react'\r\nimport { BotContext } from '../../../../context/BotContext'\r\nimport { Box, Stack, Typography, } from '@mui/material'\r\nimport { Delete, Reply } from '@mui/icons-material'\r\n\r\nconst RunningBot = () => {\r\n    const botState = React.useContext(BotContext)\r\n    return (\r\n        <div>\r\n            <Box mb={2} borderRadius={2} bgcolor='green' p={2}>\r\n                <Typography color='white' fontWeight={'bold'} >Running...</Typography>\r\n                <Typography color='black' variant='body2'  >Logout the session from your whstapp mobile app to delete this bot or create new or contact admin if any issue</Typography>\r\n            </Box>\r\n            <Stack direction={'column'} spacing={2}>\r\n                {\r\n                    botState.data.bot_data.map((i, key) => {\r\n                        return (\r\n                            <Box key={key} borderRadius={4} p={2} bgcolor='black'>\r\n                                <Stack alignItems={'flex-start'} >\r\n                                    <Box minWidth={60} mr={'40%'} bgcolor={'#3f50b5'} p={1} borderRadius={2}>\r\n                                        <Typography variant='caption' color='black' >{i.in}</Typography>\r\n                                    </Box>\r\n                                </Stack>\r\n                                <Stack mt={1} alignItems={'flex-end'} >\r\n                                    <Box ml={'40%'} bgcolor={'#262626'} p={1} borderRadius={2}>\r\n                                        <Box minWidth={60} bgcolor={'#273550'} p={1} borderRadius={2}>\r\n                                            <Reply sx={{ color: 'gray', height: 20, width: 20 }} />\r\n                                            <Typography fontSize={10} color='gray' >{i.in}</Typography>\r\n                                        </Box>\r\n                                        <Box minWidth={60} mr={1} mt={1} >\r\n                                            <Typography variant='caption' color='gray' >{i.out}</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Stack>\r\n                            </Box >\r\n                        )\r\n                    })\r\n                }\r\n            </Stack>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RunningBot","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\VisibleComp.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\send-messages\\components\\AddMediaComp.js",["498","499","500","501","502"],[],"import React from 'react'\r\nimport { Box, Button, Chip, IconButton, InputAdornment, LinearProgress, Switch, Stack, Typography } from '@mui/material'\r\nimport { SendBulkContext } from '../../../../context/SendBulkContext'\r\nimport axios from 'axios'\r\nimport { AddPhotoAlternate, AttachFile, Warning } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\n\r\nconst AddMediaComp = (props) => {\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const [uploadPer, setUploadPer] = React.useState(0)\r\n\r\n    function uploadMedia(e) {\r\n        setState({ ...state, loading: true })\r\n        e.preventDefault()\r\n        let fd = new FormData()\r\n        fd.append('file', state.file)\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/add_media`, fd, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            },\r\n            onUploadProgress: e => {\r\n                setUploadPer(parseInt(Math.round((e.loaded * 100) / e.total)))\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                alert(res.data.msg)\r\n            } else {\r\n                setState({ ...state, loading: false })\r\n                setState({ ...state, media_url: window.location.protocol + '//' + window.location.host + \"/user-media/\" + res.data.filename })\r\n                props.onComplete({ media_url: window.location.protocol + '//' + window.location.host + \"/user-media/\" + res.data.filename });\r\n                // sendBulk.setData({ ...state, media_url: window.location.protocol + '//' + window.location.host + \"/user-media/\" + res.data.filename })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Box borderRadius={2} bgcolor='#262626' p={1} mt={2} mb={2}>\r\n                <Stack justifyContent={'space-between'} direction={'row'} alignItems='center' >\r\n                    <Typography variant='caption'>With Media ?</Typography>\r\n                    <Switch\r\n\r\n                        onChange={(e) => setState({ ...state, with_media: !state.with_media })}\r\n                        checked={state.with_media} />\r\n                </Stack>\r\n\r\n                {\r\n                    state.with_media &&\r\n                    <Box mt={2} >\r\n                        <form key={1} encType='formdata/multi-part' onSubmit={uploadMedia} >\r\n                            {\r\n                                <Stack mb={2} direction={'row'}>\r\n\r\n                                    {\r\n                                        state.file || state.media_url ? (\r\n                                            state.media_url ? (\r\n                                                <Chip color='success' label={state.media_url} />\r\n                                            ) :\r\n                                                <Chip color='secondary' onDelete={() => {\r\n                                                    setState({ ...state, file: \"\" })\r\n                                                    setUploadPer(0)\r\n                                                }} label={state.file.name} />\r\n                                        ) : (\r\n                                            <Button startIcon={<AttachFile />} size='small' component=\"label\">\r\n                                                <input\r\n                                                    // accept=\"image/png, image/jpeg, image/jpg\"\r\n                                                    type=\"file\"\r\n                                                    hidden\r\n                                                    onChange={(e) => {\r\n                                                        if (e.target.files[0].size > 15000000) {\r\n                                                            return alert(\"Max accepted file is 15MB\")\r\n                                                        }\r\n                                                        setState({ ...state, file: e.target.files[0] })\r\n                                                    }}\r\n                                                />\r\n                                                Add Media\r\n                                            </Button>\r\n                                        )\r\n                                    }\r\n                                </Stack>\r\n                            }\r\n\r\n                            {uploadPer > 0 && <LinearProgress color={uploadPer === 100 ? 'success' : 'primary'} sx={{ mb: 2 }} variant=\"buffer\" value={uploadPer} valueBuffer={uploadPer + 10} />}\r\n\r\n                            {\r\n                                state.file && !state.media_url &&\r\n                                <LoadingButton\r\n                                    loading={state.loading}\r\n                                    fullWidth\r\n                                    disabled={state.media_url ? true : false}\r\n                                    color={state.media_url ? 'success' : 'secondary'}\r\n                                    size='small'\r\n                                    variant='contained' type=\"submit\" >\r\n                                    {state.media_url ? \"Done\" : \"Upload Media\"}\r\n                                </LoadingButton>\r\n                            }\r\n\r\n                        </form>\r\n                    </Box>\r\n                }\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddMediaComp","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\utils\\GetInstance.js",["503"],[],"import axios from 'axios'\r\nimport React from 'react'\r\n\r\nconst GetInstance = () => {\r\n    const [instance, setState] = React.useState(\"\")\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    async function fetchData() {\r\n        const res = await axios.get(`${process.env.REACT_APP_BASE_URL}/api/instance/get_all_token`, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        })\r\n        setState(res.data.data)\r\n    }\r\n    React.useEffect(() => {\r\n        if (!token) return\r\n        fetchData()\r\n    }, [token])\r\n    return { instance }\r\n}\r\n\r\nexport default GetInstance","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\SendMessage.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\ChooseType.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\ComposeMsg.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\CollectNum.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\excel\\WriteExlMsg.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\excel\\SendExcelMsg.js",["504","505","506"],[],"import React from 'react'\r\nimport { Box, Button, Stack, Divider, Accordion, AccordionSummary, Typography, AccordionDetails, Grid, Slider, Dialog, CircularProgress } from '@mui/material'\r\nimport { SendBulkContext } from '../../../../../context/SendBulkContext'\r\nimport { ExpandMore } from '@mui/icons-material'\r\nimport DelayMsg from '../DelayMsg'\r\nimport axios from 'axios'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport qrcode from 'qrcode'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst SendExceleMsg = () => {\r\n    const sendBulk = React.useContext(SendBulkContext)\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const [state, setState] = React.useState({})\r\n    const [qr, setQR] = React.useState(\"\")\r\n    const history = useHistory()\r\n    const [qrLoad, setQrLoad] = React.useState(false)\r\n\r\n\r\n    function qrtoBase64(qr) {\r\n        // console.log({ rec_in_qr: qr })\r\n        qrcode.toDataURL(qr, (err, src) => {\r\n            var base64Data = src.replace(/^data:image\\/png;base64,/, \"\")\r\n            setQR(base64Data)\r\n        });\r\n    }\r\n\r\n    function getQRFromDb(unique_id) {\r\n        const timer = setInterval(async () => {\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/campaign/get_one`, {\r\n                unique_id: unique_id\r\n            }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                qrtoBase64(res.data.data.qr_code)\r\n                if (res.data.data.login_status) {\r\n                    alert(\"Login Success\")\r\n                    history.push(\"/user?page=2\")\r\n                    clearInterval(timer)\r\n                }\r\n            }).catch(((err) => console.log(err)))\r\n        }, 3000)\r\n    }\r\n\r\n\r\n    async function sendExcel() {\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/campaign/send_whstapp`, sendBulk.data, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                alert(res.data.msg)\r\n                setState({ ...state, loading: false })\r\n                return\r\n            }\r\n            setState({ ...state, loading: false, dialog: true })\r\n            getQRFromDb(res.data.unique_id)\r\n        }).catch((err) => {\r\n            alert(\"Something went wrong try again!\")\r\n            setState({ ...state, loading: false })\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={state.dialog} onClose={() => setState({ ...state, dialog: false })}>\r\n                <Box p={2}>\r\n                    {\r\n                        state.loading || qrLoad ? (\r\n                            <CircularProgress />\r\n                        ) : (\r\n                            qr && <img src={`data:image/png;base64,${qr}`} />\r\n                        )\r\n                    }\r\n                    <Box mt={2}>\r\n                        <Typography align='center' >Scan this QR from your WhstaApp</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Dialog>\r\n\r\n            <Box mb={2}>\r\n                <Accordion>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMore />}>\r\n                        <Typography>{sendBulk.data.excel_array.length} message(s) to be sent.</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Grid container spacing={2} >\r\n                            {\r\n                                sendBulk.data.excel_array.map((i, key) => {\r\n                                    return (\r\n                                        <Grid key={key} xs={12} sm={6} lg={3} item>\r\n                                            <Box borderRadius={2} bgcolor='black' p={2}>\r\n                                                <Stack direction={'column'}>\r\n                                                    <Typography color='gray' variant='caption' >Number: {i.numbers}</Typography>\r\n                                                    <Typography color='gray' variant='caption' >Message: {sendBulk.data.sending_msg.length > 21 ? sendBulk.data.sending_msg.slice(0, 20).replace(\"{var_one}\", i.var_one).replace(\"{var_two}\", i.var_two) + \"...\" : sendBulk.data.sending_msg.replace(\"{var_one}\", i.var_one).replace(\"{var_two}\", i.var_two)}</Typography>\r\n                                                    {sendBulk.data.with_media && <Typography color='gray' variant='caption' >Media: Attached</Typography>}\r\n                                                </Stack>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Grid>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            </Box>\r\n\r\n            <DelayMsg />\r\n\r\n\r\n\r\n            <Box mb={2} mt={2} >\r\n                <Divider />\r\n            </Box>\r\n\r\n            <Stack direction={'column'} spacing={2}>\r\n\r\n                <LoadingButton\r\n                    size='small'\r\n                    variant='contained'\r\n                    onClick={sendExcel}\r\n                    loading={state.loading}\r\n                >\r\n                    Scan QR and send\r\n                </LoadingButton>\r\n\r\n                <Button\r\n                    onClick={() => sendBulk.setData({ ...sendBulk.data, step: 2 })}\r\n                    variant='outlined'\r\n                    size='small'>Back</Button>\r\n\r\n            </Stack>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendExceleMsg","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\paste\\PasteNum.js",["507"],[],"import { TextField, Box, Button, Stack, Divider } from '@mui/material'\r\nimport React from 'react'\r\nimport { SendBulkContext } from '../../../../../context/SendBulkContext'\r\n\r\nconst PasteNum = () => {\r\n    const sendBulk = React.useContext(SendBulkContext)\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={sendBulk.data.pasted_string}\r\n                fullWidth\r\n                placeholder='918888888888, 15555555555'\r\n                label=\"Please paste numbers here\"\r\n                helperText=\"Add a comma after the number with country code\"\r\n                multiline\r\n                onChange={(e) => {\r\n                    sendBulk.setData({ ...sendBulk.data, pasted_string: e.target.value.replace(/[^0-9\\.,]/g, \"\") })\r\n                }}\r\n                rows={4} />\r\n\r\n            <Box mb={2} mt={2} >\r\n                <Divider />\r\n            </Box>\r\n\r\n            <Stack direction={'column'} spacing={2}>\r\n\r\n                <Button\r\n                    disabled={sendBulk.data.pasted_string ? false : true}\r\n                    onClick={() => sendBulk.setData({ ...sendBulk.data, step: 2 })}\r\n                    variant='contained'\r\n                    size='small'>Next</Button>\r\n\r\n                <Button\r\n                    onClick={() => sendBulk.setData({ ...sendBulk.data, step: 0 })}\r\n                    variant='outlined'\r\n                    size='small'>Back</Button>\r\n\r\n            </Stack>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasteNum","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\excel\\ExcelNum.js",[],[],"C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\paste\\SendPasteMsg.js",["508","509"],[],"import React from 'react'\r\nimport { Box, Button, Stack, Divider, Accordion, AccordionSummary, Typography, AccordionDetails, Grid, Slider, Dialog, CircularProgress } from '@mui/material'\r\nimport { SendBulkContext } from '../../../../../context/SendBulkContext'\r\nimport { ExpandMore } from '@mui/icons-material'\r\nimport DelayMsg from '../DelayMsg'\r\nimport axios from 'axios'\r\nimport { LoadingButton } from '@mui/lab'\r\nimport qrcode from 'qrcode'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst SendPasteMsg = () => {\r\n    const sendBulk = React.useContext(SendBulkContext)\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const [state, setState] = React.useState({})\r\n    const [qr, setQR] = React.useState(\"\")\r\n    const history = useHistory()\r\n\r\n\r\n    function qrtoBase64(qr) {\r\n        // console.log({ rec_in_qr: qr })\r\n        qrcode.toDataURL(qr, (err, src) => {\r\n            var base64Data = src.replace(/^data:image\\/png;base64,/, \"\")\r\n            setQR(base64Data)\r\n        });\r\n    }\r\n\r\n    function getQRFromDb(unique_id) {\r\n        const timer = setInterval(async () => {\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}/api/campaign/get_one`, {\r\n                unique_id: unique_id\r\n            }, {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + token\r\n                }\r\n            }).then((res) => {\r\n                qrtoBase64(res.data.data.qr_code)\r\n                if (res.data.data.login_status) {\r\n                    alert(\"Login Success\")\r\n                    history.push(\"/user?page=2\")\r\n                    clearInterval(timer)\r\n                }\r\n            }).catch(((err) => console.log(err)))\r\n        }, 3000)\r\n    }\r\n\r\n\r\n    async function sendPaste() {\r\n\r\n        setState({ ...state, loading: true })\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/campaign/send_whstapp_paste`, sendBulk.data, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                alert(res.data.msg)\r\n                setState({ ...state, loading: false })\r\n                return\r\n            }\r\n            setState({ ...state, loading: false, dialog: true })\r\n            getQRFromDb(res.data.unique_id)\r\n        })\r\n            .catch((err) => {\r\n                alert(\"Something went wrong try again!\")\r\n                setState({ ...state, loading: false })\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={state.dialog} onClose={() => setState({ ...state, dialog: false })}>\r\n                <Box p={2}>\r\n                    {\r\n                        state.loading ? (\r\n                            <CircularProgress />\r\n                        ) : (\r\n                            qr && <img src={`data:image/png;base64,${qr}`} />\r\n                        )\r\n                    }\r\n                    <Box mt={2}>\r\n                        <Typography align='center' >Scan this QR from your WhstaApp</Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Dialog>\r\n\r\n            <Box mb={2}>\r\n                <Accordion>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMore />}>\r\n                        <Typography>{sendBulk.data.pasted_string.split(\",\").length} message(s) to be sent.</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Grid container spacing={2} >\r\n                            {\r\n                                sendBulk.data.pasted_string.split(\",\").map((i, key) => {\r\n                                    return (\r\n                                        <Grid key={key} xs={12} sm={6} lg={3} item>\r\n                                            <Box borderRadius={2} bgcolor='black' p={2}>\r\n                                                <Stack direction={'column'}>\r\n                                                    <Typography color='gray' variant='caption' >Number: {i}</Typography>\r\n                                                    <Typography color='gray' variant='caption' >Message: {sendBulk.data.sending_msg.length > 21 ? sendBulk.data.sending_msg.slice(0, 20) + \"...\" : sendBulk.data.sending_msg}</Typography>\r\n                                                    {sendBulk.data.with_media && <Typography color='gray' variant='caption' >Media: Attached</Typography>}\r\n                                                </Stack>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Grid>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            </Box>\r\n\r\n            <DelayMsg />\r\n\r\n\r\n\r\n\r\n            <Box mb={2} mt={2} >\r\n                <Divider />\r\n            </Box>\r\n\r\n            <Stack direction={'column'} spacing={2}>\r\n\r\n\r\n                <LoadingButton\r\n                    size='small'\r\n                    variant='contained'\r\n                    onClick={sendPaste}\r\n                    loading={state.loading}\r\n                >\r\n                    Scan QR and send\r\n                </LoadingButton>\r\n\r\n                <Button\r\n                    onClick={() => sendBulk.setData({ ...sendBulk.data, step: 2 })}\r\n                    variant='outlined'\r\n                    size='small'>Back</Button>\r\n\r\n            </Stack>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendPasteMsg","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\paste\\WritePasteMsg.js",["510","511"],[],"import { TextField, } from '@mui/material'\r\nimport React from 'react'\r\nimport { SendBulkContext } from '../../../../../context/SendBulkContext'\r\nimport AddMediaComp from '../AddMediaComp'\r\n\r\nconst WritePasteMsg = () => {\r\n    const sendBulk = React.useContext(SendBulkContext)\r\n    const [state, setState] = React.useState({})\r\n    return (\r\n        <div>\r\n            <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={4}\r\n                value={sendBulk.data.sending_msg}\r\n                onChange={(e) => sendBulk.setData({ ...sendBulk.data, sending_msg: e.target.value })}\r\n                label=\"Write your message here\" />\r\n\r\n            <AddMediaComp />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WritePasteMsg","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\AddMediaComp.js",["512","513","514","515"],[],"import React from 'react'\r\nimport { Box, Button, Chip, IconButton, InputAdornment, LinearProgress, Switch, Stack, Typography } from '@mui/material'\r\nimport { SendBulkContext } from '../../../../context/SendBulkContext'\r\nimport axios from 'axios'\r\nimport { AddPhotoAlternate, AttachFile, Warning } from '@mui/icons-material'\r\nimport { LoadingButton } from '@mui/lab'\r\n\r\nconst AddMediaComp = (props) => {\r\n    const sendBulk = React.useContext(SendBulkContext)\r\n    const [state, setState] = React.useState({})\r\n    const token = localStorage.getItem(process.env.REACT_APP_TOKEN + \"_user\")\r\n    const [uploadPer, setUploadPer] = React.useState(0)\r\n\r\n    function uploadMedia(e) {\r\n        setState({ ...state, loading: true })\r\n        e.preventDefault()\r\n        let fd = new FormData()\r\n        fd.append('file', state.file)\r\n        axios.post(`${process.env.REACT_APP_BASE_URL}/api/user/add_media`, fd, {\r\n            headers: {\r\n                Authorization: \"Bearer \" + token\r\n            },\r\n            onUploadProgress: e => {\r\n                setUploadPer(parseInt(Math.round((e.loaded * 100) / e.total)))\r\n            }\r\n        }).then((res) => {\r\n            if (!res.data.success) {\r\n                alert(res.data.msg)\r\n            } else {\r\n                setState({ ...state, loading: false })\r\n                props.onComplete({ media_url: window.location.protocol + '//' + window.location.host + \"/user-media/\" + res.data.filename });\r\n                // sendBulk.setData({ ...sendBulk.data, media_url: window.location.protocol + '//' + window.location.host + \"/user-media/\" + res.data.filename })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Box borderRadius={2} bgcolor='#262626' p={1} mt={2} mb={2}>\r\n                <Stack justifyContent={'space-between'} direction={'row'} alignItems='center' >\r\n                    <Typography variant='caption'>With Media ?</Typography>\r\n                    <Switch\r\n                        onChange={(e) => sendBulk.setData({ ...sendBulk.data, with_media: !sendBulk.data.with_media })}\r\n                        checked={sendBulk.data.with_media} />\r\n                </Stack>\r\n\r\n                {\r\n                    sendBulk.data.with_media &&\r\n                    <Box mt={2} >\r\n                        <form key={1} encType='formdata/multi-part' onSubmit={uploadMedia} >\r\n                            {\r\n                                <Stack mb={2} direction={'row'}>\r\n\r\n                                    {\r\n                                        state.file || sendBulk.data.media_url ? (\r\n                                            sendBulk.data.media_url ? (\r\n                                                <Chip color='success' label={sendBulk.data.media_url} />\r\n                                            ) :\r\n                                                <Chip color='secondary' onDelete={() => {\r\n                                                    setState({ ...state, file: \"\" })\r\n                                                    setUploadPer(0)\r\n                                                }} label={state.file.name} />\r\n                                        ) : (\r\n                                            <Button startIcon={<AttachFile />} size='small' component=\"label\">\r\n                                                <input\r\n                                                    // accept=\"image/png, image/jpeg, image/jpg\"\r\n                                                    type=\"file\"\r\n                                                    hidden\r\n                                                    onChange={(e) => {\r\n                                                        if (e.target.files[0].size > 15000000) {\r\n                                                            return alert(\"Max accepted file is 15MB\")\r\n                                                        }\r\n                                                        setState({ ...state, file: e.target.files[0] })\r\n                                                    }}\r\n                                                />\r\n                                                Add Media\r\n                                            </Button>\r\n                                        )\r\n                                    }\r\n                                </Stack>\r\n                            }\r\n\r\n                            {uploadPer > 0 && <LinearProgress color={uploadPer === 100 ? 'success' : 'primary'} sx={{ mb: 2 }} variant=\"buffer\" value={uploadPer} valueBuffer={uploadPer + 10} />}\r\n\r\n                            {\r\n                                state.file && !sendBulk.data.media_url &&\r\n                                <LoadingButton\r\n                                    loading={state.loading}\r\n                                    fullWidth\r\n                                    color='secondary'\r\n                                    size='small'\r\n                                    disabled={sendBulk.data.sending_msg ? false : true}\r\n                                    variant='contained' type=\"submit\" >\r\n                                    Upload Media\r\n                                </LoadingButton>\r\n                            }\r\n\r\n\r\n                        </form>\r\n                    </Box>\r\n                }\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddMediaComp","C:\\Users\\Administrator\\Desktop\\Whatshub_v1.2\\client\\src\\user\\pages\\bulk-msg\\components\\DelayMsg.js",["516","517","518","519","520","521","522"],[],"import React from 'react'\r\nimport { Box, Stack, Typography, Slider, Switch } from '@mui/material'\r\nimport { DesktopDatePicker, LocalizationProvider, TimePicker } from '@mui/x-date-pickers'\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport moment from 'moment'\r\nimport { SendBulkContext } from '../../../../context/SendBulkContext';\r\n\r\nconst DelayMsg = () => {\r\n    const sendBulk = React.useContext(SendBulkContext)\r\n    return (\r\n        <div>\r\n\r\n            <Typography variant='body2' color='gray' >\r\n                Time delay in each message: {sendBulk.data.delay_in_sec} sec.\r\n            </Typography>\r\n            <Box p={1} >\r\n                <Slider\r\n                    onChange={(e, val) => sendBulk.setData({ ...sendBulk.data, delay_in_sec: parseInt(val) })}\r\n                    defaultValue={sendBulk.data.delay_in_sec}\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={1}\r\n                    marks\r\n                    min={3}\r\n                    max={50}\r\n                />\r\n            </Box>\r\n\r\n\r\n            {/* <Box borderRadius={2} bgcolor={'#222222'} p={1}>\r\n                <Stack direction={'row'} alignItems='center' justifyContent=\"space-between\">\r\n                    <Typography color='gray' variant='body2'>Schedule this campaign</Typography>\r\n                    <Switch checked={sendBulk.data.schedule} onChange={(e) => sendBulk.setData({ ...sendBulk.data, schedule: e.target.checked })} />\r\n                </Stack>\r\n\r\n                {\r\n                    sendBulk.data.schedule &&\r\n                    <Box mt={1}>\r\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                            <Stack direction={'column'} spacing={2}>\r\n                                <Typography color={'orange'} variant='caption' >your campaign will be start on {sendBulk.data.time.format(\"DD-MMMM-YYYY HH:mm A\")}</Typography>\r\n\r\n                                <Box p={2} borderRadius={2} bgcolor={'black'} >\r\n                                    <Typography variant='caption'>Hours Later</Typography>\r\n                                    <Slider\r\n                                        onChange={(e, val) => sendBulk.setData({ ...sendBulk.data, time: moment().add(val, 'hours') })}\r\n                                        marks\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        step={1}\r\n                                        min={0}\r\n                                        max={24}\r\n                                    />\r\n                                </Box>\r\n                                <Box p={2} borderRadius={2} bgcolor={'black'} >\r\n                                    <Typography variant='caption'>Minutes Later</Typography>\r\n                                    <Slider\r\n                                        onChange={(e, val) => sendBulk.setData({ ...sendBulk.data, time: moment().add(val, 'minutes') })}\r\n                                        marks\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        step={1}\r\n                                        min={10}\r\n                                        max={59}\r\n                                    />\r\n                                </Box>\r\n                            </Stack>\r\n                        </LocalizationProvider>\r\n                    </Box>\r\n\r\n                }\r\n            </Box> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DelayMsg",{"ruleId":"523","severity":1,"message":"524","line":13,"column":8,"nodeType":"525","messageId":"526","endLine":13,"endColumn":17},{"ruleId":"523","severity":1,"message":"527","line":24,"column":10,"nodeType":"525","messageId":"526","endLine":24,"endColumn":16},{"ruleId":"528","severity":1,"message":"529","line":28,"column":8,"nodeType":"530","endLine":28,"endColumn":10,"suggestions":"531"},{"ruleId":"523","severity":1,"message":"532","line":2,"column":27,"nodeType":"525","messageId":"526","endLine":2,"endColumn":37},{"ruleId":"523","severity":1,"message":"533","line":7,"column":13,"nodeType":"525","messageId":"526","endLine":7,"endColumn":26},{"ruleId":"523","severity":1,"message":"534","line":2,"column":18,"nodeType":"525","messageId":"526","endLine":2,"endColumn":29},{"ruleId":"523","severity":1,"message":"535","line":2,"column":31,"nodeType":"525","messageId":"526","endLine":2,"endColumn":44},{"ruleId":"523","severity":1,"message":"536","line":19,"column":114,"nodeType":"525","messageId":"526","endLine":19,"endColumn":122},{"ruleId":"523","severity":1,"message":"537","line":19,"column":124,"nodeType":"525","messageId":"526","endLine":19,"endColumn":145},{"ruleId":"538","severity":1,"message":"539","line":79,"column":33,"nodeType":"540","endLine":81,"endColumn":67},{"ruleId":"523","severity":1,"message":"541","line":1,"column":50,"nodeType":"525","messageId":"526","endLine":1,"endColumn":64},{"ruleId":"542","severity":1,"message":"543","line":92,"column":45,"nodeType":"540","endLine":92,"endColumn":139},{"ruleId":"538","severity":1,"message":"539","line":129,"column":61,"nodeType":"540","endLine":131,"endColumn":95},{"ruleId":"538","severity":1,"message":"539","line":140,"column":57,"nodeType":"540","endLine":142,"endColumn":61},{"ruleId":"523","severity":1,"message":"534","line":2,"column":18,"nodeType":"525","messageId":"526","endLine":2,"endColumn":29},{"ruleId":"523","severity":1,"message":"535","line":2,"column":31,"nodeType":"525","messageId":"526","endLine":2,"endColumn":44},{"ruleId":"523","severity":1,"message":"537","line":19,"column":103,"nodeType":"525","messageId":"526","endLine":19,"endColumn":124},{"ruleId":"528","severity":1,"message":"544","line":28,"column":8,"nodeType":"530","endLine":28,"endColumn":15,"suggestions":"545"},{"ruleId":"523","severity":1,"message":"546","line":1,"column":26,"nodeType":"525","messageId":"526","endLine":1,"endColumn":33},{"ruleId":"523","severity":1,"message":"546","line":1,"column":26,"nodeType":"525","messageId":"526","endLine":1,"endColumn":33},{"ruleId":"523","severity":1,"message":"547","line":1,"column":15,"nodeType":"525","messageId":"526","endLine":1,"endColumn":21},{"ruleId":"523","severity":1,"message":"546","line":1,"column":34,"nodeType":"525","messageId":"526","endLine":1,"endColumn":41},{"ruleId":"538","severity":1,"message":"539","line":30,"column":102,"nodeType":"540","endLine":32,"endColumn":90},{"ruleId":"528","severity":1,"message":"548","line":26,"column":8,"nodeType":"530","endLine":26,"endColumn":15,"suggestions":"549"},{"ruleId":"523","severity":1,"message":"550","line":6,"column":10,"nodeType":"525","messageId":"526","endLine":6,"endColumn":22},{"ruleId":"542","severity":1,"message":"543","line":75,"column":45,"nodeType":"540","endLine":75,"endColumn":149},{"ruleId":"542","severity":1,"message":"543","line":78,"column":49,"nodeType":"540","endLine":78,"endColumn":137},{"ruleId":"523","severity":1,"message":"551","line":17,"column":13,"nodeType":"525","messageId":"526","endLine":17,"endColumn":22},{"ruleId":"528","severity":1,"message":"552","line":41,"column":8,"nodeType":"530","endLine":41,"endColumn":19,"suggestions":"553"},{"ruleId":"528","severity":1,"message":"554","line":26,"column":8,"nodeType":"530","endLine":26,"endColumn":15,"suggestions":"555"},{"ruleId":"523","severity":1,"message":"556","line":1,"column":10,"nodeType":"525","messageId":"526","endLine":1,"endColumn":17},{"ruleId":"523","severity":1,"message":"557","line":39,"column":14,"nodeType":"525","messageId":"526","endLine":39,"endColumn":21},{"ruleId":"523","severity":1,"message":"558","line":1,"column":10,"nodeType":"525","messageId":"526","endLine":1,"endColumn":22},{"ruleId":"523","severity":1,"message":"559","line":1,"column":36,"nodeType":"525","messageId":"526","endLine":1,"endColumn":48},{"ruleId":"523","severity":1,"message":"560","line":2,"column":25,"nodeType":"525","messageId":"526","endLine":2,"endColumn":33},{"ruleId":"523","severity":1,"message":"561","line":2,"column":35,"nodeType":"525","messageId":"526","endLine":2,"endColumn":43},{"ruleId":"528","severity":1,"message":"562","line":30,"column":8,"nodeType":"530","endLine":30,"endColumn":15,"suggestions":"563"},{"ruleId":"564","severity":1,"message":"565","line":77,"column":93,"nodeType":"566","messageId":"567","endLine":77,"endColumn":95},{"ruleId":"564","severity":1,"message":"565","line":93,"column":95,"nodeType":"566","messageId":"567","endLine":93,"endColumn":97},{"ruleId":"564","severity":1,"message":"565","line":107,"column":151,"nodeType":"566","messageId":"567","endLine":107,"endColumn":153},{"ruleId":"528","severity":1,"message":"568","line":28,"column":8,"nodeType":"530","endLine":28,"endColumn":15,"suggestions":"569"},{"ruleId":"528","severity":1,"message":"548","line":29,"column":8,"nodeType":"530","endLine":29,"endColumn":15,"suggestions":"570"},{"ruleId":"523","severity":1,"message":"571","line":3,"column":27,"nodeType":"525","messageId":"526","endLine":3,"endColumn":32},{"ruleId":"523","severity":1,"message":"572","line":4,"column":10,"nodeType":"525","messageId":"526","endLine":4,"endColumn":18},{"ruleId":"523","severity":1,"message":"541","line":1,"column":82,"nodeType":"525","messageId":"526","endLine":1,"endColumn":96},{"ruleId":"528","severity":1,"message":"573","line":27,"column":8,"nodeType":"530","endLine":27,"endColumn":10,"suggestions":"574"},{"ruleId":"528","severity":1,"message":"575","line":30,"column":8,"nodeType":"530","endLine":30,"endColumn":15,"suggestions":"576"},{"ruleId":"523","severity":1,"message":"577","line":1,"column":23,"nodeType":"525","messageId":"526","endLine":1,"endColumn":30},{"ruleId":"523","severity":1,"message":"547","line":2,"column":15,"nodeType":"525","messageId":"526","endLine":2,"endColumn":21},{"ruleId":"523","severity":1,"message":"578","line":16,"column":20,"nodeType":"525","messageId":"526","endLine":16,"endColumn":29},{"ruleId":"528","severity":1,"message":"579","line":35,"column":8,"nodeType":"530","endLine":35,"endColumn":15,"suggestions":"580"},{"ruleId":"542","severity":1,"message":"543","line":107,"column":30,"nodeType":"540","endLine":107,"endColumn":73},{"ruleId":"528","severity":1,"message":"581","line":40,"column":8,"nodeType":"530","endLine":40,"endColumn":15,"suggestions":"582"},{"ruleId":"523","severity":1,"message":"583","line":2,"column":49,"nodeType":"525","messageId":"526","endLine":2,"endColumn":58},{"ruleId":"528","severity":1,"message":"584","line":47,"column":8,"nodeType":"530","endLine":47,"endColumn":15,"suggestions":"585"},{"ruleId":"523","severity":1,"message":"586","line":3,"column":8,"nodeType":"525","messageId":"526","endLine":3,"endColumn":18},{"ruleId":"528","severity":1,"message":"587","line":18,"column":8,"nodeType":"530","endLine":18,"endColumn":10,"suggestions":"588"},{"ruleId":"523","severity":1,"message":"589","line":1,"column":65,"nodeType":"525","messageId":"526","endLine":1,"endColumn":71},{"ruleId":"528","severity":1,"message":"590","line":24,"column":8,"nodeType":"530","endLine":24,"endColumn":21,"suggestions":"591"},{"ruleId":"523","severity":1,"message":"592","line":1,"column":18,"nodeType":"525","messageId":"526","endLine":1,"endColumn":28},{"ruleId":"523","severity":1,"message":"593","line":6,"column":10,"nodeType":"525","messageId":"526","endLine":6,"endColumn":20},{"ruleId":"523","severity":1,"message":"594","line":10,"column":5,"nodeType":"525","messageId":"526","endLine":10,"endColumn":23},{"ruleId":"523","severity":1,"message":"547","line":2,"column":33,"nodeType":"525","messageId":"526","endLine":2,"endColumn":39},{"ruleId":"523","severity":1,"message":"524","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":17},{"ruleId":"523","severity":1,"message":"595","line":15,"column":12,"nodeType":"525","messageId":"526","endLine":15,"endColumn":21},{"ruleId":"523","severity":1,"message":"596","line":15,"column":23,"nodeType":"525","messageId":"526","endLine":15,"endColumn":35},{"ruleId":"538","severity":1,"message":"539","line":127,"column":103,"nodeType":"540","endLine":127,"endColumn":156},{"ruleId":"542","severity":1,"message":"543","line":134,"column":57,"nodeType":"540","endLine":134,"endColumn":124},{"ruleId":"523","severity":1,"message":"578","line":15,"column":20,"nodeType":"525","messageId":"526","endLine":15,"endColumn":29},{"ruleId":"542","severity":1,"message":"543","line":71,"column":34,"nodeType":"540","endLine":71,"endColumn":77},{"ruleId":"528","severity":1,"message":"590","line":36,"column":8,"nodeType":"530","endLine":36,"endColumn":15,"suggestions":"597"},{"ruleId":"523","severity":1,"message":"547","line":4,"column":10,"nodeType":"525","messageId":"526","endLine":4,"endColumn":16},{"ruleId":"523","severity":1,"message":"592","line":11,"column":15,"nodeType":"525","messageId":"526","endLine":11,"endColumn":25},{"ruleId":"523","severity":1,"message":"598","line":2,"column":21,"nodeType":"525","messageId":"526","endLine":2,"endColumn":37},{"ruleId":"523","severity":1,"message":"599","line":4,"column":10,"nodeType":"525","messageId":"526","endLine":4,"endColumn":16},{"ruleId":"523","severity":1,"message":"592","line":2,"column":29,"nodeType":"525","messageId":"526","endLine":2,"endColumn":39},{"ruleId":"523","severity":1,"message":"600","line":2,"column":41,"nodeType":"525","messageId":"526","endLine":2,"endColumn":55},{"ruleId":"523","severity":1,"message":"601","line":3,"column":10,"nodeType":"525","messageId":"526","endLine":3,"endColumn":25},{"ruleId":"523","severity":1,"message":"602","line":5,"column":10,"nodeType":"525","messageId":"526","endLine":5,"endColumn":27},{"ruleId":"523","severity":1,"message":"603","line":5,"column":41,"nodeType":"525","messageId":"526","endLine":5,"endColumn":48},{"ruleId":"528","severity":1,"message":"581","line":18,"column":8,"nodeType":"530","endLine":18,"endColumn":15,"suggestions":"604"},{"ruleId":"523","severity":1,"message":"605","line":2,"column":104,"nodeType":"525","messageId":"526","endLine":2,"endColumn":110},{"ruleId":"523","severity":1,"message":"578","line":17,"column":20,"nodeType":"525","messageId":"526","endLine":17,"endColumn":29},{"ruleId":"542","severity":1,"message":"543","line":77,"column":35,"nodeType":"540","endLine":77,"endColumn":78},{"ruleId":"606","severity":1,"message":"607","line":17,"column":102,"nodeType":"608","messageId":"609","endLine":17,"endColumn":103,"suggestions":"610"},{"ruleId":"523","severity":1,"message":"605","line":2,"column":104,"nodeType":"525","messageId":"526","endLine":2,"endColumn":110},{"ruleId":"542","severity":1,"message":"543","line":80,"column":35,"nodeType":"540","endLine":80,"endColumn":78},{"ruleId":"523","severity":1,"message":"611","line":8,"column":12,"nodeType":"525","messageId":"526","endLine":8,"endColumn":17},{"ruleId":"523","severity":1,"message":"612","line":8,"column":19,"nodeType":"525","messageId":"526","endLine":8,"endColumn":27},{"ruleId":"523","severity":1,"message":"592","line":2,"column":29,"nodeType":"525","messageId":"526","endLine":2,"endColumn":39},{"ruleId":"523","severity":1,"message":"600","line":2,"column":41,"nodeType":"525","messageId":"526","endLine":2,"endColumn":55},{"ruleId":"523","severity":1,"message":"602","line":5,"column":10,"nodeType":"525","messageId":"526","endLine":5,"endColumn":27},{"ruleId":"523","severity":1,"message":"603","line":5,"column":41,"nodeType":"525","messageId":"526","endLine":5,"endColumn":48},{"ruleId":"523","severity":1,"message":"571","line":2,"column":15,"nodeType":"525","messageId":"526","endLine":2,"endColumn":20},{"ruleId":"523","severity":1,"message":"589","line":2,"column":42,"nodeType":"525","messageId":"526","endLine":2,"endColumn":48},{"ruleId":"523","severity":1,"message":"613","line":3,"column":10,"nodeType":"525","messageId":"526","endLine":3,"endColumn":27},{"ruleId":"523","severity":1,"message":"614","line":3,"column":29,"nodeType":"525","messageId":"526","endLine":3,"endColumn":49},{"ruleId":"523","severity":1,"message":"615","line":3,"column":51,"nodeType":"525","messageId":"526","endLine":3,"endColumn":61},{"ruleId":"523","severity":1,"message":"616","line":4,"column":10,"nodeType":"525","messageId":"526","endLine":4,"endColumn":24},{"ruleId":"523","severity":1,"message":"617","line":5,"column":8,"nodeType":"525","messageId":"526","endLine":5,"endColumn":14},"no-unused-vars","'GetWebSet' is defined but never used.","Identifier","unusedVar","'splash' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'checkAdmin'. Either include it or remove the dependency array.","ArrayExpression",["618"],"'useHistory' is defined but never used.","'user_by_token' is assigned a value but never used.","'createTheme' is defined but never used.","'ThemeProvider' is defined but never used.","'Settings' is defined but never used.","'SettingsBackupRestore' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'LinearProgress' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["619"],"'Divider' is defined but never used.","'Button' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getDash'. Either include it or remove the dependency array.",["620"],"'SketchPicker' is defined but never used.","'plan_data' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'adminContext'. Either include it or remove the dependency array.",["621"],"React Hook React.useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["622"],"'Refresh' is defined but never used.","'testSet' is defined but never used.","'ChevronRight' is defined but never used.","'FileDownload' is defined but never used.","'TreeItem' is defined but never used.","'TreeView' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getOrder'. Either include it or remove the dependency array.",["623"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook React.useEffect has a missing dependency: 'getEmail'. Either include it or remove the dependency array.",["624"],["625"],"'Stack' is defined but never used.","'AddReply' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getPlans'. Either include it or remove the dependency array.",["626"],"React Hook React.useEffect has a missing dependency: 'getCam'. Either include it or remove the dependency array.",["627"],"'Surfing' is defined but never used.","'setQrLoad' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getList'. Either include it or remove the dependency array.",["628"],"React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["629"],"'Container' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getMsg'. Either include it or remove the dependency array.",["630"],"'SendSingle' is defined but never used.","React Hook React.useEffect has a missing dependency: 'fetchPlans'. Either include it or remove the dependency array.",["631"],"'Switch' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getBot'. Either include it or remove the dependency array.",["632"],"'IconButton' is defined but never used.","'addMinutes' is defined but never used.","'twentyMinutesLater' is assigned a value but never used.","'orderDone' is assigned a value but never used.","'setOrderDone' is assigned a value but never used.",["633"],"'AccordionActions' is defined but never used.","'Delete' is defined but never used.","'InputAdornment' is defined but never used.","'SendBulkContext' is defined but never used.","'AddPhotoAlternate' is defined but never used.","'Warning' is defined but never used.",["634"],"'Slider' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["635","636"],"'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'DesktopDatePicker' is defined but never used.","'LocalizationProvider' is defined but never used.","'TimePicker' is defined but never used.","'AdapterDateFns' is defined but never used.","'moment' is defined but never used.",{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},{"desc":"641","fix":"642"},{"desc":"643","fix":"644"},{"desc":"645","fix":"646"},{"desc":"647","fix":"648"},{"desc":"649","fix":"650"},{"desc":"641","fix":"651"},{"desc":"652","fix":"653"},{"desc":"654","fix":"655"},{"desc":"656","fix":"657"},{"desc":"658","fix":"659"},{"desc":"660","fix":"661"},{"desc":"662","fix":"663"},{"desc":"664","fix":"665"},{"desc":"666","fix":"667"},{"desc":"658","fix":"668"},{"messageId":"669","fix":"670","desc":"671"},{"messageId":"672","fix":"673","desc":"674"},"Update the dependencies array to be: [checkAdmin]",{"range":"675","text":"676"},"Update the dependencies array to be: [history, token]",{"range":"677","text":"678"},"Update the dependencies array to be: [getDash, token]",{"range":"679","text":"680"},"Update the dependencies array to be: [adminContext, all_users]",{"range":"681","text":"682"},"Update the dependencies array to be: [getMessages, token]",{"range":"683","text":"684"},"Update the dependencies array to be: [getOrder, token]",{"range":"685","text":"686"},"Update the dependencies array to be: [getEmail, token]",{"range":"687","text":"688"},{"range":"689","text":"680"},"Update the dependencies array to be: [getPlans]",{"range":"690","text":"691"},"Update the dependencies array to be: [getCam, token]",{"range":"692","text":"693"},"Update the dependencies array to be: [getList, token]",{"range":"694","text":"695"},"Update the dependencies array to be: [fetchData, token]",{"range":"696","text":"697"},"Update the dependencies array to be: [getMsg, token]",{"range":"698","text":"699"},"Update the dependencies array to be: [fetchPlans]",{"range":"700","text":"701"},"Update the dependencies array to be: [user, token, getBot]",{"range":"702","text":"703"},"Update the dependencies array to be: [getBot, token]",{"range":"704","text":"705"},{"range":"706","text":"697"},"removeEscape",{"range":"707","text":"708"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"709","text":"710"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[915,917],"[checkAdmin]",[961,968],"[history, token]",[840,847],"[getDash, token]",[1534,1545],"[adminContext, all_users]",[998,1005],"[getMessages, token]",[1094,1101],"[getOrder, token]",[895,902],"[getEmail, token]",[943,950],[966,968],"[getPlans]",[981,988],"[getCam, token]",[1192,1199],"[getList, token]",[1321,1328],"[fetchData, token]",[1598,1605],"[getMsg, token]",[637,639],"[fetchPlans]",[966,979],"[user, token, getBot]",[1204,1211],"[getBot, token]",[580,587],[739,740],"",[739,739],"\\"]