{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport var useGridColumnSpanning = function useGridColumnSpanning(apiRef) {\n  var lookup = React.useRef({});\n  var setCellColSpanInfo = React.useCallback(function (rowId, columnIndex, cellColSpanInfo) {\n    var sizes = lookup.current;\n    if (!sizes[rowId]) {\n      sizes[rowId] = {};\n    }\n    sizes[rowId][columnIndex] = cellColSpanInfo;\n  }, []);\n  var getCellColSpanInfo = React.useCallback(function (rowId, columnIndex) {\n    var _lookup$current$rowId;\n    return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];\n  }, []); // Calculate `colSpan` for the cell.\n\n  var calculateCellColSpan = React.useCallback(function (params) {\n    var columnIndex = params.columnIndex,\n      rowId = params.rowId,\n      minFirstColumnIndex = params.minFirstColumnIndex,\n      maxLastColumnIndex = params.maxLastColumnIndex,\n      columns = params.columns;\n    var columnsLength = columns.length;\n    var column = columns[columnIndex];\n    var colSpan = typeof column.colSpan === 'function' ? column.colSpan(apiRef.current.getCellParams(rowId, column.field)) : column.colSpan;\n    if (!colSpan || colSpan === 1) {\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan: 1,\n          width: column.computedWidth\n        }\n      });\n      return {\n        colSpan: 1\n      };\n    }\n    var width = column.computedWidth;\n    for (var j = 1; j < colSpan; j += 1) {\n      var nextColumnIndex = columnIndex + j; // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n\n      if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n        var nextColumn = columns[nextColumnIndex];\n        width += nextColumn.computedWidth;\n        setCellColSpanInfo(rowId, columnIndex + j, {\n          spannedByColSpan: true,\n          rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n          leftVisibleCellIndex: columnIndex\n        });\n      }\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan: colSpan,\n          width: width\n        }\n      });\n    }\n    return {\n      colSpan: colSpan\n    };\n  }, [apiRef, setCellColSpanInfo]); // Calculate `colSpan` for each cell in the row\n\n  var calculateColSpan = React.useCallback(function (_ref) {\n    var rowId = _ref.rowId,\n      minFirstColumn = _ref.minFirstColumn,\n      maxLastColumn = _ref.maxLastColumn,\n      columns = _ref.columns;\n    for (var i = minFirstColumn; i < maxLastColumn; i += 1) {\n      var cellProps = calculateCellColSpan({\n        columnIndex: i,\n        rowId: rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn,\n        columns: columns\n      });\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [calculateCellColSpan]);\n  var columnSpanningApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo,\n    unstable_calculateColSpan: calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningApi, 'GridColumnSpanningAPI');\n  var handleColumnReorderChange = React.useCallback(function () {\n    // `colSpan` needs to be recalculated after column reordering\n    lookup.current = {};\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridApiEventHandler","useGridColumnSpanning","apiRef","lookup","useRef","setCellColSpanInfo","useCallback","rowId","columnIndex","cellColSpanInfo","sizes","current","getCellColSpanInfo","_lookup$current$rowId","calculateCellColSpan","params","minFirstColumnIndex","maxLastColumnIndex","columns","columnsLength","length","column","colSpan","getCellParams","field","spannedByColSpan","cellProps","width","computedWidth","j","nextColumnIndex","nextColumn","rightVisibleCellIndex","Math","min","leftVisibleCellIndex","calculateColSpan","minFirstColumn","maxLastColumn","i","columnSpanningApi","unstable_getCellColSpanInfo","unstable_calculateColSpan","handleColumnReorderChange"],"sources":["C:/Users/Administrator/Desktop/Whatshub_v1.2/client/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport const useGridColumnSpanning = apiRef => {\n  const lookup = React.useRef({});\n  const setCellColSpanInfo = React.useCallback((rowId, columnIndex, cellColSpanInfo) => {\n    const sizes = lookup.current;\n\n    if (!sizes[rowId]) {\n      sizes[rowId] = {};\n    }\n\n    sizes[rowId][columnIndex] = cellColSpanInfo;\n  }, []);\n  const getCellColSpanInfo = React.useCallback((rowId, columnIndex) => {\n    var _lookup$current$rowId;\n\n    return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];\n  }, []); // Calculate `colSpan` for the cell.\n\n  const calculateCellColSpan = React.useCallback(params => {\n    const {\n      columnIndex,\n      rowId,\n      minFirstColumnIndex,\n      maxLastColumnIndex,\n      columns\n    } = params;\n    const columnsLength = columns.length;\n    const column = columns[columnIndex];\n    const colSpan = typeof column.colSpan === 'function' ? column.colSpan(apiRef.current.getCellParams(rowId, column.field)) : column.colSpan;\n\n    if (!colSpan || colSpan === 1) {\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan: 1,\n          width: column.computedWidth\n        }\n      });\n      return {\n        colSpan: 1\n      };\n    }\n\n    let width = column.computedWidth;\n\n    for (let j = 1; j < colSpan; j += 1) {\n      const nextColumnIndex = columnIndex + j; // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n\n      if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n        const nextColumn = columns[nextColumnIndex];\n        width += nextColumn.computedWidth;\n        setCellColSpanInfo(rowId, columnIndex + j, {\n          spannedByColSpan: true,\n          rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n          leftVisibleCellIndex: columnIndex\n        });\n      }\n\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan,\n          width\n        }\n      });\n    }\n\n    return {\n      colSpan\n    };\n  }, [apiRef, setCellColSpanInfo]); // Calculate `colSpan` for each cell in the row\n\n  const calculateColSpan = React.useCallback(({\n    rowId,\n    minFirstColumn,\n    maxLastColumn,\n    columns\n  }) => {\n    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {\n      const cellProps = calculateCellColSpan({\n        columnIndex: i,\n        rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn,\n        columns\n      });\n\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [calculateCellColSpan]);\n  const columnSpanningApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo,\n    unstable_calculateColSpan: calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningApi, 'GridColumnSpanningAPI');\n  const handleColumnReorderChange = React.useCallback(() => {\n    // `colSpan` needs to be recalculated after column reordering\n    lookup.current = {};\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}