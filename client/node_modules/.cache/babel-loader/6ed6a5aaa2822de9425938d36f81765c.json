{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\nexport var preferencePanelStateInitializer = function preferencePanelStateInitializer(state, props) {\n  var _props$initialState$p, _props$initialState;\n  return _extends({}, state, {\n    preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {\n      open: false\n    }\n  });\n};\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport var useGridPreferencesPanel = function useGridPreferencesPanel(apiRef, props) {\n  var _props$initialState3;\n  var logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  var hideTimeout = React.useRef();\n  var immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  var hidePreferences = React.useCallback(function () {\n    logger.debug('Hiding Preferences Panel');\n    var preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);\n    if (preferencePanelState.openedPanelValue) {\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n    }\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        preferencePanel: {\n          open: false\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  var doNotHidePanel = React.useCallback(function () {\n    immediateTimeout.current = setTimeout(function () {\n      return clearTimeout(hideTimeout.current);\n    }, 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  var hidePreferencesDelayed = React.useCallback(function () {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  var showPreferences = React.useCallback(function (newValue) {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        preferencePanel: _extends({}, state.preferencePanel, {\n          open: true,\n          openedPanelValue: newValue\n        })\n      });\n    });\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, doNotHidePanel, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences: showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'ColumnMenuApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var stateExportPreProcessing = React.useCallback(function (prevState, context) {\n    var _props$initialState2;\n    var preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n    var shouldExportPreferencePanel =\n    // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the panel was initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.preferencePanel) != null ||\n    // Always export if the panel is opened\n    preferencePanelToExport.open;\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, (_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.preferencePanel]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var preferencePanel = context.stateToRestore.preferencePanel;\n    if (preferencePanel != null) {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          preferencePanel: preferencePanel\n        });\n      });\n    }\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","useGridRegisterPipeProcessor","gridPreferencePanelStateSelector","preferencePanelStateInitializer","state","props","_props$initialState$p","_props$initialState","preferencePanel","initialState","open","useGridPreferencesPanel","apiRef","_props$initialState3","logger","hideTimeout","useRef","immediateTimeout","hidePreferences","useCallback","debug","preferencePanelState","current","openedPanelValue","publishEvent","setState","forceUpdate","doNotHidePanel","setTimeout","clearTimeout","hidePreferencesDelayed","showPreferences","newValue","stateExportPreProcessing","prevState","context","_props$initialState2","preferencePanelToExport","shouldExportPreferencePanel","exportOnlyDirtyModels","stateRestorePreProcessing","params","stateToRestore","useEffect"],"sources":["C:/Users/Administrator/Desktop/Whatshub_v1.2/client/node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPreferencePanelStateSelector } from './gridPreferencePanelSelector';\nexport const preferencePanelStateInitializer = (state, props) => {\n  var _props$initialState$p, _props$initialState;\n\n  return _extends({}, state, {\n    preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {\n      open: false\n    }\n  });\n};\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\n\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  var _props$initialState3;\n\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n  const hideTimeout = React.useRef();\n  const immediateTimeout = React.useRef();\n  /**\n   * API METHODS\n   */\n\n  const hidePreferences = React.useCallback(() => {\n    logger.debug('Hiding Preferences Panel');\n    const preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);\n\n    if (preferencePanelState.openedPanelValue) {\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: {\n        open: false\n      }\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]); // This is to prevent the preferences from closing when you open a select box or another panel,\n  // The issue is in MUI core V4 => Fixed in V5\n\n  const doNotHidePanel = React.useCallback(() => {\n    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);\n  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,\n  // we can cancel the action if the trigger element still need the panel...\n\n  const hidePreferencesDelayed = React.useCallback(() => {\n    hideTimeout.current = setTimeout(hidePreferences, 100);\n  }, [hidePreferences]);\n  const showPreferences = React.useCallback(newValue => {\n    logger.debug('Opening Preferences Panel');\n    doNotHidePanel();\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, doNotHidePanel, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences: hidePreferencesDelayed\n  }, 'ColumnMenuApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);\n    const shouldExportPreferencePanel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the panel was initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.preferencePanel) != null || // Always export if the panel is opened\n    preferencePanelToExport.open;\n\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, (_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(hideTimeout.current);\n      clearTimeout(immediateTimeout.current);\n    };\n  }, []);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}