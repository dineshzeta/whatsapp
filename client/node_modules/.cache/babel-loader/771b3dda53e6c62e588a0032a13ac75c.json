{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { wrapWithWarningOnCall } from '../../../utils/warning';\n/**\n * @category Columns\n * @deprecated Use the selector returning exactly the value you are looking for.\n * @ignore - do not document.\n * TODO v6: Rename `gridColumnsStateSelector`\n */\n\nexport var gridColumnsSelector = function gridColumnsSelector(state) {\n  return state.columns;\n};\n/**\n * Get the field of each column.\n * @category Columns\n */\n\nexport var gridColumnFieldsSelector = createSelector(gridColumnsSelector, function (columnsState) {\n  return columnsState.all;\n});\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\n\nexport var gridColumnLookupSelector = createSelector(gridColumnsSelector, function (columnsState) {\n  return columnsState.lookup;\n});\n/**\n * Get the columns as an array.\n * @category Columns\n */\n\nexport var gridColumnDefinitionsSelector = createSelector(gridColumnFieldsSelector, gridColumnLookupSelector, function (allFields, lookup) {\n  return allFields.map(function (field) {\n    return lookup[field];\n  });\n});\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\n\nexport var gridColumnVisibilityModelSelector = createSelector(gridColumnsSelector, function (columnsState) {\n  return columnsState.columnVisibilityModel;\n});\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\n\nexport var gridVisibleColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, function (columns, columnVisibilityModel) {\n  return columns.filter(function (column) {\n    return columnVisibilityModel[column.field] !== false;\n  });\n});\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\n\nexport var gridVisibleColumnFieldsSelector = createSelector(gridVisibleColumnDefinitionsSelector, function (visibleColumns) {\n  return visibleColumns.map(function (column) {\n    return column.field;\n  });\n});\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\n\nexport var gridColumnPositionsSelector = createSelector(gridVisibleColumnDefinitionsSelector, function (visibleColumns) {\n  var positions = [];\n  var currentPosition = 0;\n  for (var i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\n\nexport var gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, function (visibleColumns, positions) {\n  var colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\n\nexport var gridFilterableColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, function (columns) {\n  return columns.filter(function (col) {\n    return col.filterable;\n  });\n});\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\n\nexport var gridFilterableColumnLookupSelector = createSelector(gridColumnDefinitionsSelector, function (columns) {\n  return columns.reduce(function (acc, col) {\n    if (col.filterable) {\n      acc[col.field] = col;\n    }\n    return acc;\n  }, {});\n});\n/**\n * @category Columns\n * @deprecated Use `gridColumnFieldsSelector` instead.\n * @ignore - do not document.\n */\n\nexport var allGridColumnsFieldsSelector = wrapWithWarningOnCall(gridColumnFieldsSelector, ['MUI: The method allGridColumnsFieldsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnFieldsSelector instead']);\n/**\n * @category Columns\n * @deprecated Use `gridColumnDefinitionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport var allGridColumnsSelector = wrapWithWarningOnCall(gridColumnDefinitionsSelector, ['MUI: The method allGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnDefinitionsSelector instead']);\n/**\n * @category Visible Columns\n * @deprecated Use `gridVisibleColumnDefinitionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport var visibleGridColumnsSelector = wrapWithWarningOnCall(gridVisibleColumnDefinitionsSelector, ['MUI: The method visibleGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridVisibleColumnDefinitionsSelector instead']);\n/**\n * @category Columns\n * @deprecated Use `gridFilterableColumnDefinitionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport var filterableGridColumnsSelector = wrapWithWarningOnCall(gridFilterableColumnDefinitionsSelector, ['MUI: The method filterableGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead']);\n/**\n * @category Columns\n * @deprecated Use `gridFilterableColumnLookupSelector` instead (not the same return format).\n * @ignore - do not document.\n */\n\nexport var filterableGridColumnsIdsSelector = wrapWithWarningOnCall(createSelector(gridFilterableColumnDefinitionsSelector, function (columns) {\n  return columns.map(function (col) {\n    return col.field;\n  });\n}), ['MUI: The method filterableGridColumnsIdsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead.', 'The return format is now a lookup, if you want to get the same output as before, use the following code:', '', 'const lookup = gridFilterableColumnLookupSelector(apiRef);', 'const fields = gridColumnFieldsSelector(apiRef).filter(field => lookup[field]);']);\n/**\n * Get the amount of visible columns.\n * @category Visible Columns\n * @deprecated Use the length of the array returned by `gridVisibleColumnDefinitionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport var visibleGridColumnsLengthSelector = wrapWithWarningOnCall(createSelector(gridVisibleColumnDefinitionsSelector, function (visibleColumns) {\n  return visibleColumns.length;\n}), ['MUI: The method visibleGridColumnsLengthSelector is deprecated and will be removed in the next major version.', 'Use the length of the array returned by gridVisibleColumnDefinitionsSelector instead.']);\n/**\n * @category Visible Columns\n * @deprecated Use `gridColumnsTotalWidthSelector` or `gridColumnPositionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport var gridColumnsMetaSelector = wrapWithWarningOnCall(createSelector(gridColumnPositionsSelector, gridColumnsTotalWidthSelector, function (positions, totalWidth) {\n  return {\n    totalWidth: totalWidth,\n    positions: positions\n  };\n}), ['MUI: The method gridColumnsMetaSelector is deprecated and will be removed in the next major version.', 'Use gridColumnsTotalWidthSelector or gridColumnPositionsSelector instead']);","map":{"version":3,"names":["createSelector","wrapWithWarningOnCall","gridColumnsSelector","state","columns","gridColumnFieldsSelector","columnsState","all","gridColumnLookupSelector","lookup","gridColumnDefinitionsSelector","allFields","map","field","gridColumnVisibilityModelSelector","columnVisibilityModel","gridVisibleColumnDefinitionsSelector","filter","column","gridVisibleColumnFieldsSelector","visibleColumns","gridColumnPositionsSelector","positions","currentPosition","i","length","push","computedWidth","gridColumnsTotalWidthSelector","colCount","gridFilterableColumnDefinitionsSelector","col","filterable","gridFilterableColumnLookupSelector","reduce","acc","allGridColumnsFieldsSelector","allGridColumnsSelector","visibleGridColumnsSelector","filterableGridColumnsSelector","filterableGridColumnsIdsSelector","visibleGridColumnsLengthSelector","gridColumnsMetaSelector","totalWidth"],"sources":["C:/Users/Administrator/Desktop/Whatshub_v1.2/client/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js"],"sourcesContent":["import { createSelector } from '../../../utils/createSelector';\nimport { wrapWithWarningOnCall } from '../../../utils/warning';\n/**\n * @category Columns\n * @deprecated Use the selector returning exactly the value you are looking for.\n * @ignore - do not document.\n * TODO v6: Rename `gridColumnsStateSelector`\n */\n\nexport const gridColumnsSelector = state => state.columns;\n/**\n * Get the field of each column.\n * @category Columns\n */\n\nexport const gridColumnFieldsSelector = createSelector(gridColumnsSelector, columnsState => columnsState.all);\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\n\nexport const gridColumnLookupSelector = createSelector(gridColumnsSelector, columnsState => columnsState.lookup);\n/**\n * Get the columns as an array.\n * @category Columns\n */\n\nexport const gridColumnDefinitionsSelector = createSelector(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\n\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsSelector, columnsState => columnsState.columnVisibilityModel);\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\n\nexport const gridVisibleColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\n\nexport const gridVisibleColumnFieldsSelector = createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\n\nexport const gridColumnPositionsSelector = createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => {\n  const positions = [];\n  let currentPosition = 0;\n\n  for (let i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n\n  return positions;\n});\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\n\nexport const gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n\n  if (colCount === 0) {\n    return 0;\n  }\n\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\n\nexport const gridFilterableColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\n\nexport const gridFilterableColumnLookupSelector = createSelector(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\n  if (col.filterable) {\n    acc[col.field] = col;\n  }\n\n  return acc;\n}, {}));\n/**\n * @category Columns\n * @deprecated Use `gridColumnFieldsSelector` instead.\n * @ignore - do not document.\n */\n\nexport const allGridColumnsFieldsSelector = wrapWithWarningOnCall(gridColumnFieldsSelector, ['MUI: The method allGridColumnsFieldsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnFieldsSelector instead']);\n/**\n * @category Columns\n * @deprecated Use `gridColumnDefinitionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport const allGridColumnsSelector = wrapWithWarningOnCall(gridColumnDefinitionsSelector, ['MUI: The method allGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnDefinitionsSelector instead']);\n/**\n * @category Visible Columns\n * @deprecated Use `gridVisibleColumnDefinitionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport const visibleGridColumnsSelector = wrapWithWarningOnCall(gridVisibleColumnDefinitionsSelector, ['MUI: The method visibleGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridVisibleColumnDefinitionsSelector instead']);\n/**\n * @category Columns\n * @deprecated Use `gridFilterableColumnDefinitionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport const filterableGridColumnsSelector = wrapWithWarningOnCall(gridFilterableColumnDefinitionsSelector, ['MUI: The method filterableGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead']);\n/**\n * @category Columns\n * @deprecated Use `gridFilterableColumnLookupSelector` instead (not the same return format).\n * @ignore - do not document.\n */\n\nexport const filterableGridColumnsIdsSelector = wrapWithWarningOnCall(createSelector(gridFilterableColumnDefinitionsSelector, columns => columns.map(col => col.field)), ['MUI: The method filterableGridColumnsIdsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead.', 'The return format is now a lookup, if you want to get the same output as before, use the following code:', '', 'const lookup = gridFilterableColumnLookupSelector(apiRef);', 'const fields = gridColumnFieldsSelector(apiRef).filter(field => lookup[field]);']);\n/**\n * Get the amount of visible columns.\n * @category Visible Columns\n * @deprecated Use the length of the array returned by `gridVisibleColumnDefinitionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport const visibleGridColumnsLengthSelector = wrapWithWarningOnCall(createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.length), ['MUI: The method visibleGridColumnsLengthSelector is deprecated and will be removed in the next major version.', 'Use the length of the array returned by gridVisibleColumnDefinitionsSelector instead.']);\n/**\n * @category Visible Columns\n * @deprecated Use `gridColumnsTotalWidthSelector` or `gridColumnPositionsSelector` instead.\n * @ignore - do not document.\n */\n\nexport const gridColumnsMetaSelector = wrapWithWarningOnCall(createSelector(gridColumnPositionsSelector, gridColumnsTotalWidthSelector, (positions, totalWidth) => ({\n  totalWidth,\n  positions\n})), ['MUI: The method gridColumnsMetaSelector is deprecated and will be removed in the next major version.', 'Use gridColumnsTotalWidthSelector or gridColumnPositionsSelector instead']);"],"mappings":"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"},"metadata":{},"sourceType":"module"}