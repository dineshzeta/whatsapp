{"ast":null,"code":"import _slicedToArray from \"C:/Users/Administrator/Desktop/Whatshub_v1.2/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nvar getSelectionModelPropValue = function getSelectionModelPropValue(selectionModelProp, prevSelectionModel) {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport var selectionStateInitializer = function selectionStateInitializer(state, props) {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport var useGridSelection = function useGridSelection(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridSelection');\n  var propSelectionModel = React.useMemo(function () {\n    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.selectionModel]);\n  var lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: 'selectionChange'\n  });\n  var checkboxSelection = props.checkboxSelection,\n    disableMultipleSelection = props.disableMultipleSelection,\n    disableSelectionOnClick = props.disableSelectionOnClick,\n    pagination = props.pagination,\n    paginationMode = props.paginationMode,\n    propIsRowSelectable = props.isRowSelectable;\n  var canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  var visibleRows = useGridVisibleRows(apiRef, props);\n  var expandMouseRowRangeSelection = React.useCallback(function (id) {\n    var _lastRowToggled$curre;\n    var endId = id;\n    var startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    var isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      var visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      var startIndex = visibleRowIds.findIndex(function (rowId) {\n        return rowId === startId;\n      });\n      var endIndex = visibleRowIds.findIndex(function (rowId) {\n        return rowId === endId;\n      });\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId: startId,\n      endId: endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  var setSelectionModel = React.useCallback(function (model) {\n    var currentModel = gridSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(\"Setting selection model\");\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          selection: model\n        });\n      });\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  var isRowSelected = React.useCallback(function (id) {\n    return gridSelectionStateSelector(apiRef.current.state).includes(id);\n  }, [apiRef]);\n  var isRowSelectable = React.useCallback(function (id) {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    var rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode == null ? void 0 : rowNode.position) === 'footer' || rowNode != null && rowNode.isPinned) {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  var getSelectedRows = React.useCallback(function () {\n    return selectedGridRowsSelector(apiRef);\n  }, [apiRef]);\n  var selectRow = React.useCallback(function (id) {\n    var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(\"Setting selection for row \".concat(id));\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(\"Toggling selection for row \".concat(id));\n      var selection = gridSelectionStateSelector(apiRef.current.state);\n      var newSelection = selection.filter(function (el) {\n        return el !== id;\n      });\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      var isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  var selectRows = React.useCallback(function (ids) {\n    var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(\"Setting selection for several rows\");\n    var selectableIds = ids.filter(function (id) {\n      return apiRef.current.isRowSelectable(id);\n    });\n    var newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      var selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(function (id) {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    var isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  var selectRowRange = React.useCallback(function (_ref) {\n    var startId = _ref.startId,\n      endId = _ref.endId;\n    var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var resetSelection = arguments.length > 2 ? arguments[2] : undefined;\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(\"Expanding selection from row \".concat(startId, \" to row \").concat(endId)); // Using rows from all pages allow to select a range across several pages\n\n    var allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    var startIndex = allPagesRowIds.indexOf(startId);\n    var endIndex = allPagesRowIds.indexOf(endId);\n    var _ref2 = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex],\n      _ref3 = _slicedToArray(_ref2, 2),\n      start = _ref3[0],\n      end = _ref3[1];\n    var rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  var selectionApi = {\n    selectRow: selectRow,\n    selectRows: selectRows,\n    selectRowRange: selectRowRange,\n    setSelectionModel: setSelectionModel,\n    getSelectedRows: getSelectedRows,\n    isRowSelected: isRowSelected,\n    isRowSelectable: isRowSelectable\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  var removeOutdatedSelection = React.useCallback(function () {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    var currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    var rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    var selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    var hasChanged = false;\n    currentSelection.forEach(function (id) {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  var handleSingleRowSelection = React.useCallback(function (id, event) {\n    var hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    var isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    var resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    var isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  var handleRowClick = React.useCallback(function (params, event) {\n    var _closest;\n    if (disableSelectionOnClick) {\n      return;\n    }\n    var field = (_closest = event.target.closest(\".\".concat(gridClasses.cell))) == null ? void 0 : _closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      var column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    var rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.isPinned) {\n      return;\n    }\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  var preventSelectionOnShift = React.useCallback(function (params, event) {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  var handleRowSelectionCheckboxChange = React.useCallback(function (params, event) {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  var handleHeaderSelectionCheckboxChange = React.useCallback(function (params) {\n    var shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    var rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      var focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        var isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        var newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        var previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        var start;\n        var end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        var rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(function (row) {\n          return row.id;\n        });\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, 'rowClick', handleRowClick);\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(function () {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  var isStateControlled = propSelectionModel != null;\n  React.useEffect(function () {\n    if (isStateControlled) {\n      return;\n    } // props.isRowSelectable changed\n\n    var currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      var newSelection = currentSelection.filter(function (id) {\n        return isRowSelectable(id);\n      });\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(function () {\n    var currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      var _getVisibleRows = getVisibleRows(apiRef, {\n          pagination: pagination,\n          paginationMode: paginationMode\n        }),\n        currentPageRows = _getVisibleRows.rows;\n      var currentPageRowsLookup = currentPageRows.reduce(function (acc, _ref4) {\n        var id = _ref4.id;\n        acc[id] = true;\n        return acc;\n      }, {});\n      var firstSelectableRow = currentSelection.find(function (id) {\n        var isSelectable = true;\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};","map":{"version":3,"names":["_extends","React","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridVisibleSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","getVisibleRows","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","selectionStateInitializer","state","props","_getSelectionModelPro","selection","selectionModel","useGridSelection","apiRef","logger","propSelectionModel","useMemo","current","lastRowToggled","useRef","unstable_registerControlState","stateId","propModel","propOnChange","onSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableMultipleSelection","disableSelectionOnClick","pagination","paginationMode","propIsRowSelectable","isRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setSelectionModel","model","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","position","isPinned","getSelectedRows","selectRow","resetSelection","newSelection","filter","el","push","isSelectionValid","length","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","_closest","field","target","closest","cell","getAttribute","column","getColumn","type","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","rowsToBeSelected","handleCellKeyDown","getCellMode","Edit","currentTarget","contains","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","toLowerCase","getAllRowIds","useEffect","undefined","isStateControlled","currentPageRows","currentPageRowsLookup","reduce","acc","firstSelectableRow","find","isSelectable"],"sources":["C:/Users/Administrator/Desktop/Whatshub_v1.2/client/node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const selectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n\n  return _extends({}, state, {\n    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.selectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: 'selectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if ((rowNode == null ? void 0 : rowNode.position) === 'footer' || rowNode != null && rowNode.isPinned) {\n      return false;\n    }\n\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n\n    if (disableSelectionOnClick) {\n      return;\n    }\n\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    const rowNode = apiRef.current.getRowNode(params.id);\n\n    if (rowNode.isPinned) {\n      return;\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, 'rowClick', handleRowClick);\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // props.isRowSelectable changed\n\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, {\n        id\n      }) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}